<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="expressions">
  <title>Spring 표현 언어 (SpEL)</title>

  <section id="expressions-intro">
    <title>소개</title>

    <para>스프링 표현언어 (줄여서 SpEL)는 런타임시에 객체 그래프를 조회하고 조작하는 강력한 
    표현언어이다. 언어의 문법은 통일된 EL(Unified EL)과 비슷하지만 추가적인 기능을 제공한다. 
    가장 눈에 띄는 것은 메서드 호출과 기본 문자열 템플릿 기능이다.</para>

    <para>OGNL, MVEL, JBoss EL 등의 여러가지 자바 표현언어가 존재하지만 스프링 표현언어는 
    스프링 포트폴리오의 모든 제품에 걸쳐서 사용할 수 있는 하나의 표현언어를 스프링 커뮤니티에 
    제공하기 위해서 만들어졌다. 스프링 표현언어의 기능은 이클립스에 기반한 SpringSource Tool 
    Suite에서 코드 자동완성같은 도구의 요구사항을 포함해서 스프링 포트폴리오의 제품들의 필요사항에 
    따라 만들어졌다. SpEL은 통합되어야 하는 다른 표현언어 구현체를 허용하기 위해 기술 불가지론 
    API(technology agnostic API)에 기반하고 있다.</para>

    <para>스프링 포트폴리오내에서 표현식 평가(expression evaluation)의 기반으로 SpEL을 제공하지만 
    SpEL은 스프링에 직접 묶여있지 않고 독립적으로 사용할 수 있다. 독립적이기 위해서 이번 챕터의 많은 
    예제는 독립적인 표현언어처럼 SpEL을 사용한다. 독립적으로 사용하려면 파서같은 부트스트랩핑 기반 클래스 
    몇가지를 생성할 필요가 있다. 대부분의 스프링 사용자들은 이러한 기반 클래스를 다룰 필요 없이 평가할 
    표현문을 작성하기만 하면 된다. 일반적인 사용에 대한 예제는 <link
    linkend="expressions-beandef">빈 정의를 정의하는 표현식</link> 섹션에서 보여주는 것과 같은 
    XML 생성이나 어노테이션 기반의 빈정의를 생성하는 곳에 SpEL을 통합하는 것이다.</para>

  <para>이번 챕터에서는 표현언어의 기능, API, 언어의 문법을 다룬다. 여러 부분에서 Inventor와 
    Inventor의 Society 클래스를 표현식 평가에 대한 타겟객체로 사용한다. 이러한 클래스 선언과 
    선언에 관한 데이터들은 이 챕터의 마지막 부분에 나와있다.</para>
  </section>

  <section id="expressions-features">
    <title>기능 개요</title>

    <para>표현 언어는 다음의 기능을 지원한다.</para>

    <itemizedlist>
      <listitem>
        <para>리터럴 표현식</para>
      </listitem>

      <listitem>
        <para>불리언과 관계형 오퍼레이터</para>
      </listitem>

      <listitem>
        <para>정규 표현식</para>
      </listitem>

      <listitem>
        <para>Class 표현식</para>
      </listitem>

      <listitem>
        <para>프로퍼티, 배열, 리스트, 맵에 대한 접근</para>
      </listitem>

      <listitem>
        <para>메서드 호출</para>
      </listitem>

      <listitem>
        <para>관계형 오퍼레이터</para>
      </listitem>

      <listitem>
        <para>할당</para>
      </listitem>

      <listitem>
        <para>생성자 호출</para>
      </listitem>
      
      <listitem>
        <para>빈(Bean) 참조</para>
      </listitem>
      
      <listitem>
        <para>배열 생성</para>
      </listitem>
	
	  <listitem>
        <para>인라인 리스</para>
      </listitem>

      <listitem>
        <para>삼항 연산자</para>
      </listitem>

      <listitem>
        <para>변수</para>
      </listitem>

      <listitem>
        <para>사용자 정의 함수</para>
      </listitem>

      <listitem>
        <para>컬렉션 투영(Collection projection)</para>
      </listitem>

      <listitem>
        <para>컬렉션 선택</para>
      </listitem>

      <listitem>
        <para>템플릿화된 표현식</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="expressions-evaluation">
    <title>스프링의 Expression 인터페이스를 사용한 표현식 평가</title>

    <para>이번 섹션에서는 SpEL 인터페이스의 간단한 사용방법과 SpEL의 표현언어를 설명한다. 완전한 
    언어 레퍼런스는 <link lang="" linkend="expressions-language-ref">언어 
    레퍼런스</link> 섹션에 나와 있다.</para>

    <para>다음 코드는 리터럴 문자표현인 'Hello World'를 평가하는 SpEL API를 
    설명한다.</para>

    <para><programlisting language="java">ExpressionParser parser = new SpelExpressionParser();
Expression exp = parser.parseExpression("<emphasis role="bold">'Hello World'</emphasis>");
String message = (String) exp.getValue();</programlisting>message 변수의 값은 
    'Hello World'다.</para>

    <para>아마도 가장 많이 사용할 SpEL 클래스와 인터페이스는 
    <package>org.springframework.expression</package> 패키지와 이 패키지의 하위 
    페이지와 <package>spel.support</package> 패키지안에 있다.</para>

    <para><interfacename>ExpressionParser</interfacename> 인터페이스는 문자열 표현을 
    파싱하는 책임이 있다. 이 예제에서 문자열 표현은 따옴표로 묶인 문자열 리터럴로 표현됐다. 
    <interfacename>Expression</interfacename> 인터페이스는 앞에서 정의한 문자열 
    표현의 평가를 책임진다. '<literal>parser.parseExpression</literal>'와 
    '<literal>exp.getValue</literal>'를 호출할 때 각각 
    <classname>ParseException</classname>와 
    <classname>EvaluationException</classname>의 두 가지 예외가 
    던져질 수 있다.</para>

    <para>SpEL은 메서드 호출이나 프로퍼티 접근, 생성자 호출같은 넓은 범위의 기능을 
    지원한다.</para>

    <para>메서드 호출의 예제로 문자열 리터럴에서 'concat' 메서드를 호출한다.</para>

    <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();
Expression exp = parser.parseExpression("<emphasis role="bold">'Hello World'.concat('!')</emphasis>");
String message = (String) exp.getValue();</programlisting>

    <para>message의 값은 이제 'Hello World!'이다.</para>

    <para>JavaBean 프로터티를 호출하는 예제로 다음에서 보듯이 문자열 프로퍼티 'Bytes'를 
    호출할 수 있다.</para>

    <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();

// 'getBytes()' 실행
Expression exp = parser.parseExpression("<emphasis role="bold">'Hello World'.bytes</emphasis>");  

byte[] bytes = (byte[]) exp.getValue();</programlisting>

    <para>SpEL은 표준 'dot' 표기법(예: prop1.prop2.prop3)을 사용해서 중첩된 프로퍼티와 
    프로퍼티의 값 설정도 지원한다.</para>

    <para>퍼블릭 필드도 접근할 수 있다.</para>

    <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();

// 'getBytes().length' 실행
Expression exp = parser.parseExpression("<emphasis role="bold">'Hello World'.bytes.length</emphasis>");  

int length = (Integer) exp.getValue();</programlisting>

    <para>문자열 리터럴 대신 String의 생성자를 호출할 수 있다.</para>

    <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();
Expression exp = parser.parseExpression("<emphasis role="bold">new String('hello world').toUpperCase()</emphasis>");
String message = exp.getValue(String.class);</programlisting>

    <para>제너릭 메서드 <literal>public &lt;T&gt; T
    getValue(Class&lt;T&gt; desiredResultType)</literal>의 사용을 보자.
    이 메서드를 사용하면 표현식의 값을 원하는 결과 타입으로 캐스팅할 필요가 없어진다. 값이 타입 
    <literal>T</literal>로 캐스팅할 수 없거나 등록된 타입 컴버터를 사용해서 변환할 수 없다면 
    <classname>EvaluationException</classname>가 던져질 것이다.</para>

    <para>SpEL의 더 일반적인 사용방법은 특정 객체 인스턴스(root 객체라고 부른다.)에 대해서 평가되는 
    표현식 문자열을 제공하는 것이다. 두가지 옵션이 있는데 표현식을 평가하는 각 호출과 함께 변경될 수 있는 
    평가될 표현식에 대한 객체에 따라 선택한다. 다음 예제에서 Inventor 클래스의 인스턴스에서 
    <literal>name</literal> 프로퍼티를 획득한다.</para>

    <programlisting language="java">// 캘린더를 생성하고 설정한다
GregorianCalendar c = new GregorianCalendar();
c.set(1856, 7, 9);

//  생성자 아규먼트는 name, birthday, nationality이다.
Inventor tesla = new Inventor("Nikola Tesla", c.getTime(), "Serbian");

ExpressionParser parser = new SpelExpressionParser();
Expression exp = parser.parseExpression("<emphasis role="bold">name</emphasis>");
EvaluationContext context = new StandardEvaluationContext(tesla);

String name = (String) exp.getValue(context);</programlisting>
<para>마지막 줄에서 
    문자열 변수 'name'의 값은 "Nikola Tesla"로 설정될 것이다. StandardEvaluationContext 
    클래스는 "name" 프로퍼티가 평가될 객체를 지정할 수 있는 곳이다. 이는 root 객체가 변경되지 않는 경우 
    사용할 메카니즘이고 평가 컨텍스트에서 설정할 수 있다. root 객체가 계속해서 변경될 것이라면 다음 예제에서 
    보여주듯이 각 <literal>getValue</literal> 호출에서 제공할 수 있다.</para>
    
    <programlisting language="java">// 캘린더를 생성하고 설정한다
GregorianCalendar c = new GregorianCalendar();
c.set(1856, 7, 9);

//  생성자 아규먼트는 name, birthday, nationality이다.
Inventor tesla = new Inventor("Nikola Tesla", c.getTime(), "Serbian");

ExpressionParser parser = new SpelExpressionParser();
Expression exp = parser.parseExpression("<emphasis role="bold">name</emphasis>");

String name = (String) exp.getValue(tesla);
    </programlisting><para>이 경우에 inventor <literal>tesla</literal>를 직접 
    <literal>getValue</literal>에 제공하고 표현식 평가의 기반은 내부적으로 기본 평가 컨텍스트를 
    생성하고 관리한다 - 이는 제공하는 것을 필요로 하지 않는다.</para>
    
    <para>StandardEvaluationContext는 생성하는 비용이 상대적으로 비싸고 반복적으로 사용하는 동안 
    상태를 캐시해서 다음 표현식 평가를 더 빠르게 수행할 수 있도록 한다. 이 때문에 각 표현식 평가에서 새로운 
    것을 생성하는 것보다는 가능한한 캐시한 후에 재사용 하는 것이 더 좋다.
    </para>
    <para>몇몇 경우에 평가 컨텍스트를 설정해서 사용하기를 원할 수 있고 <literal>getValue</literal>를 
    호출할 때마다 다른 루트객체를 제공하기 원할 수 있다. <literal>getValue</literal>는 같은 호출에서 
    두 가지를 모두 지정할 수 있다. 이러한 경우에 호출에 전달된 루트객체는 평가 컨텍스트가 지정한 
    것(null일수도 있다.)을 오버라이드한다.</para>

    <para>
	<note>
        <para>SpEL를 독립적으로 사용할 때 파서를 생성하고 표현식을 파싱할 필요가 있고 어쩌면 평가 
        컨텍스트와 루트 컨텍스트 객체를 제공할 필요가 있을 수도 있다. 하지만 설정 파일(예를 들면 
        스프링 빈이나 스프링 Web Flow 정의에서)의 일부로 SpEL 표현식 문자열만 제공하는 것이 더 
        일반적인 사용방법이다. 이 경우에 파서, 평가 컨텍스트, 루트 객체와 미리 정의한 어떤 변수도 
        암묵적으로 설정할 수 있어서 사용자는 표현식 외에는 아무것도 설정할 필요가 없다.</para>
    </note>
  마지막 소개하는 예제로 불리언 연산자의 사용은 이전 예제의 Inventor객체의 사용을 
    보여준다.</para>

    <programlisting language="java">Expression exp = parser.parseExpression("name == 'Nikola Tesla'");
boolean result = exp.getValue(context, Boolean.class);  // true로 평가된다</programlisting>

    <section>
      <title>EvaluationContext 인터페이스</title>

      <para>프로퍼티, 메서드, 필드를 처리하고 타입변환을 수행하는 표현식을 평가할 때 
      <interfacename>EvaluationContext</interfacename> 인터페이스를 사용한다. 새로운 
      구현체 <classname>StandardEvaluationContext</classname>는 객체를 조작하려고 
      리플렉션을 사용하고 성능을 향상시키기 위해서 <package>java.lang.reflect</package>의 
      <classname>Method</classname>, <classname>Field</classname>, 
      <classname>Constructor</classname>를 캐싱한다.</para>

      <para><classname>StandardEvaluationContext</classname>는 
      <methodname>setRootObject()</methodname> 메서드나 생성자에 루트객체를 전달해서 
      평가에 사용할 루트객체를 지정하는 곳이다. <methodname>setVariable()</methodname>와 
      <methodname>registerFunction()</methodname> 메서드를 사용해서 표현식에서 사용할 
      변수나 함수를 지정할 수도 있다. 변수와 함수의 사용방법은 언어 레퍼런스 섹션인 <link
      linkend="expressions-ref-variables">변수</link>와 <link lang=""
      linkend="expressions-ref-functions">함수</link>에 설명되어 있다. 
      <classname>StandardEvaluationContext</classname>는 SpEL이 표현식을 평가하는 
      방법을 확장하기 위해서 커스텀 <classname>ConstructorResolver</classname>, 
      <classname>MethodResolver</classname>, <classname>PropertyAccessor</classname>를 
      등록할 수 있는 곳이기도 하다. 이러한 클래스들에 대한 더 자세한 내용은 JavaDoc을 참고해라.</para>

      <section>
        <title>타입 변환</title>

        <para>기본적으로 SpEL은 스프링 코어에서 사용할 수 있는 변환 서비스
        (<literal>org.springframework.core.convert.ConversionService</literal>)를 
        사용한다. 일반적인 타입에 대해서 내장된 많은 컨버터들과 함께 온 이 컨버전 서비스는 추가할 수 있다. 
        게다가 제너릭에 친화적이라는 것이 변환서비스의 핵심기능이다. 즉 표현식에서 제너릭 타입을 사용할 때 
        어떤 객체를 만다더라도 SpEL은 제대로된 타입을 유지하려고 변환을 시도할 것이다.</para>

        <para>이는 실사용에서 무엇을 의미하는가? <literal>List</literal> 프로퍼티를 설정하려고 
        <literal>setValue()</literal>를 사용하는 경우를 생각해 보자. 실제 프로퍼티의 타입은 
        <literal>List&lt;Boolean&gt;</literal>이다. SpEL은 엘리먼트가 위치하기 전에 리스트의 
        엘리먼트가 <literal>Boolean</literal>르오 변환되어야 한다는 것을 인지할 것이다. 
        다음은 간단한 예제다.</para>

        <programlisting language="java">class Simple {
    public List&lt;Boolean&gt; booleanList = new ArrayList&lt;Boolean&gt;();
}
    	
Simple simple = new Simple();

simple.booleanList.add(true);

StandardEvaluationContext simpleContext = new StandardEvaluationContext(simple);

// 여기서 false를 문자열로 전달한다. SpEL과 변환 서비스는 Boolean이 되어야 한다는 것을
// 인식하고 변환할 것이다
parser.parseExpression("booleanList[0]").setValue(simpleContext, "false");

// b느 false가 될 것이다
Boolean b = simple.booleanList.get(0);
        </programlisting>
      </section>
    </section>
  </section>

  <section id="expressions-beandef">
    <title>빈 정의를 정의하는 표현식</title>

    <para>BeanDefinition을 정의하는 XML이나 어노테이션 기반의 설정 메타데이터와 
    SpEL 표현식을 같이 쓸 수 있다. 두 경우에 모두 표현식을 정의하는 문법은 
    <literal>#{ &lt;표현식 문자열&gt; }</literal>의 형식이다.</para>

    <section id="expressions-beandef-xml-based">
      <title>XML기반의 설정</title>

      <para>프로퍼티나 생성자 아규먼트의 값을 다음과 같이 표현식으로 설정할 수 있다.</para>

      <programlisting language="xml">&lt;bean id="numberGuess" class="org.spring.samples.NumberGuess"&gt;
    &lt;property name="randomNumber" value="#{ T(java.lang.Math).random() * 100.0 }"/&gt;

    &lt;!-- 다른 프로퍼티들 --&gt;
&lt;/bean&gt;</programlisting>

      <para>'systemProperties' 변수는 미리 정의되었으므로 다음과 같이 표현식내에서 사용할 수 
      있다. 이 컨텍스트에서 미리 정의된 변수앞에 '#'기호를 붙히지 않은 것에 주의해라.</para>

      <programlisting language="xml">&lt;bean id="taxCalculator" class="org.spring.samples.TaxCalculator"&gt;
    &lt;property name="defaultLocale" value="#{ systemProperties['user.region'] }"/&gt;

    &lt;!-- 다른 프로퍼티들 --&gt;
&lt;/bean&gt;</programlisting>

<para>다음 예제처럼 이름으로 다른 빈 프로퍼티를 참조할 수도 있다.</para>

      <para><programlisting language="xml">&lt;bean id="numberGuess" class="org.spring.samples.NumberGuess"&gt;
    &lt;property name="randomNumber" value="#{ T(java.lang.Math).random() * 100.0 }"/&gt;

    &lt;!-- 다른 프로퍼티들 --&gt;
&lt;/bean&gt;


&lt;bean id="shapeGuess" class="org.spring.samples.ShapeGuess"&gt;
    &lt;property name="initialShapeSeed" value="#{ numberGuess.randomNumber }"/&gt;

    &lt;!-- 다른 프로퍼티들 --&gt;
&lt;/bean&gt;</programlisting></para>
    </section>

    <section id="expressions-beandef-annotation-based">
      <title>어노테이션 기반의 설정</title>

      <para>기본값을 지정하기 위해 <literal>@Value</literal> 어노테이션을 필드나 메서드, 
      메서드/생성자의 파라미터에 붙힐 수 있다.</para>

      <para>다음은 필드 변수의 기본값을 설정하는 예제다.</para>

      <programlisting language="java">public static class FieldValueTestBean

  @Value("#{ systemProperties['user.region'] }")
  private String defaultLocale;

  public void setDefaultLocale(String defaultLocale)
  {
    this.defaultLocale = defaultLocale;
  }

  public String getDefaultLocale() 
  {
    return this.defaultLocale;
  }

}

</programlisting>

      <para>다음 예제는 프로퍼티 setter 메서드에 붙혔다는 점만 다르다.</para>

      <programlisting language="java">public static class PropertyValueTestBean

  private String defaultLocale;

  @Value("#{ systemProperties['user.region'] }")
  public void setDefaultLocale(String defaultLocale)
  {
    this.defaultLocale = defaultLocale;
  }

  public String getDefaultLocale() 
  {
    return this.defaultLocale;
  }

}</programlisting>

      <para>자동연결된(Autowired) 메서드나 생성자에도 
      <literal>@Value</literal> 어노테이션을 사용할 수 있다.</para>

      <programlisting language="java">public class SimpleMovieLister {

  private MovieFinder movieFinder;
  private String defaultLocale;

  @Autowired
  public void configure(MovieFinder movieFinder, 
                        @Value("#{ systemProperties['user.region'] }"} String defaultLocale) {
      this.movieFinder = movieFinder;
      this.defaultLocale = defaultLocale;
  }

  // ...
}</programlisting>

      <para><programlisting language="java">public class MovieRecommender {

  private String defaultLocale;

  private CustomerPreferenceDao customerPreferenceDao;

  @Autowired
  public MovieRecommender(CustomerPreferenceDao customerPreferenceDao,
                          @Value("#{systemProperties['user.country']}"} String defaultLocale) {
      this.customerPreferenceDao = customerPreferenceDao;
      this.defaultLocale = defaultLocale;
  }

  // ...
}</programlisting></para>
    </section>
  </section>

  <section id="expressions-language-ref">
    <title>언어 레퍼런스</title>

    <section id="expressions-ref-literal">
      <title>리터럴 표현식</title>

      <para>지원하는 리터럴 표현식의 타입은 문자열, 날짜, 숫자값(int, real, hex), 불리언, 
      null이다. 문자열은 따옴표로 구분된다. 문자열내에 따옴표를 사용하려면 2개의 따옴표를 사용해라. 
      다음 예제에서 리터럴의 사용방법을 간단히 보여준다. 보통은 이 예제처럼 단독적으로 쓰이지 않고 
      더 복잡한 표현식의 일부로써 사용한다. 예를 들면 논리적인 비교연산의 한쪽부분에 리터럴을 
      사용한다.</para>

      <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();

// "Hello World"로 평가된다
String helloWorld = (String) parser.parseExpression("'Hello World'").getValue(); 

double avogadrosNumber  = (Double) parser.parseExpression("6.0221415E+23").getValue();  

// 2147483647로 평가된다
int maxValue = (Integer) parser.parseExpression("0x7FFFFFFF").getValue();  

boolean trueValue = (Boolean) parser.parseExpression("true").getValue();

Object nullValue = parser.parseExpression("null").getValue();
</programlisting>

      <para>숫자는 음수기호, 지수표시, 소수점을 지원한다. 기본적으로 실제 숫자는 
      Double.parseDouble()로 파싱한다.</para>
    </section>

    <section>
      <title>프로퍼티, 배열, 리스트, 맵, 인덱서</title>

      <para>프로퍼티 참조를 탐색하는 것은 쉬운데 그냥 중첩된 프로퍼티 값을 가리키는 마침표를 
      사용해라. Inventor 클래스의 pupin과 tesla 인스턴스에는 <link 
      linkend="expressions-example-classes">예제에 사용한 클래스들</link> 섹션에 
      나온 데이터들이 있다. 다음의 표현식을 사용해서 Tesla가 태어난 해솨 Pupin이 태어난 
      도시를 탐색한다.</para>

      <programlisting lang="" language="java">// 1856으로 평가된다.
int year = (Integer) parser.parseExpression("Birthdate.Year + 1900").getValue(context); 


String city = (String) parser.parseExpression("placeOfBirth.City").getValue(context);</programlisting>

      <para>프로퍼티명의 첫글자는 대소문자를 구별하지 않는다. 배열과 리스트의 내용은 대괄호를 
      사용해서 획득한다.</para>

      <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();

// 발명품 배열
StandardEvaluationContext teslaContext = new StandardEvaluationContext(tesla);

// "Induction motor"로 평가된다.
String invention = parser.parseExpression("inventions[3]").getValue(teslaContext, 
                                                                    String.class); 


// 회원 리스트
StandardEvaluationContext societyContext = new StandardEvaluationContext(ieee);

// "Nikola Tesla"로 평가된다.
String name = parser.parseExpression("Members[0].Name").getValue(societyContext, String.class);

// 리스트와 배열 탐색
// "Wireless communication"로 평가된다.
String invention = parser.parseExpression("Members[0].Inventions[6]").getValue(societyContext,
                                                                               String.class);
</programlisting>

      <para>대괄호로 키값 리터럴을 지정해서 맵의 내용을 획득한다. 아래 예제의 경우 Officers 
      맵의 키가 문자열이므로 문자열 리터럴을 지정할 수 있다.</para>

      <programlisting language="java">// Officer의 딕션어리

Inventor pupin = parser.parseExpression("Officers['president']").getValue(societyContext, 
                                                                          Inventor.class);

// "Idvor"로 평가된다
String city = 
    parser.parseExpression("Officers['president'].PlaceOfBirth.City").getValue(societyContext,
                                                                               String.class);

// 값을 설정한다
parser.parseExpression("Officers['advisors'][0].PlaceOfBirth.Country").setValue(societyContext,
                                                                                "Croatia");

</programlisting>
    </section>
    <section>
      <title>인라인 리스트</title>

      <para>리스트는 {} 표시법을 사용한 표현식으로 직접 나타낼 수 있다.
      </para>

      <programlisting lang="" language="java">
// 4개의 숫자를 담고 있는 자바 리스트로 평가된다
List numbers = (List) parser.parseExpression("{1,2,3,4}").getValue(context); 

List listOfLists = (List) parser.parseExpression("{{'a','b'},{'x','y'}}").getValue(context); 
</programlisting>
      <para>단독으로 {}를 사용하면 비어있는 리스트를 의미한다. 성능때문에 리스트 자체가 고정된 
      리터럴로 구성되어 있다면 각 평가마다 새로운 리스트를 만드는 것이 아니라 표현식을 나타내는 
      변하지 않는 리스트를 생성한다.</para>
	</section>
	
	<section>
    <title>배열 생성</title>

      <para>배열은 자바문법과 유사하게 만들 수 있고 선택적으로 생성시에 존재해야 하는 배열을 갖는 
      initializer를 제공할 수 있다.
      </para>

      <programlisting lang="" language="java">int[] numbers1 = (int[]) parser.parseExpression("new int[4]").getValue(context); 

// initializer가진 배열
int[] numbers2 = (int[]) parser.parseExpression("new int[]{1,2,3}").getValue(context); 

// 다차원 배열
int[][] numbers3 = (int[][]) parser.parseExpression("new int[4][5]").getValue(context); 
</programlisting>
      <para>현재는 다차원 배열을 생성할 때 initializer를 제공할 수 없다.</para>
	</section>
	
    <section>
      <title>메서드</title>

      <para>메서드는 전형적인 자바 프로그래밍 문법을 사용해서 호출한다. 리터럴에서 메서드를 호출할 
      수도 있다. 가변인자(Varargs)도 지원한다.</para>

      <programlisting language="java">// 문자열 리터럴, "bc"로 평가된다
String c = parser.parseExpression("'abc'.substring(2, 3)").getValue(String.class);

// true로 평가된다.
boolean isMember = parser.parseExpression("isMember('Mihajlo Pupin')").getValue(societyContext,
                                                                                Boolean.class);</programlisting>
    </section>

    <section>
      <title>연산자(Operators)</title>

      <section>
        <title>관계 연산자</title>

        <para>표준 연산자 표기법을 사용해서 같다, 같지 않다, 작다, 작거나 같다, 크다, 크거나 같다 
        등의 관계 연산자를 지원한다.</para>

        <para><programlisting language="java">// true로 평가된다
boolean trueValue = parser.parseExpression("2 == 2").getValue(Boolean.class);

// false로 평가된다
boolean falseValue = parser.parseExpression("2 &lt; -5.0").getValue(Boolean.class);

// true로 평가된다
boolean trueValue = parser.parseExpression("'black' &lt; 'block'").getValue(Boolean.class);</programlisting>
        표준 관계 연산자뿐만 아니라 SpEL은 'matches' 연산자에 기반한 정규표현식과 
        'instanceof'를 지원한다.</para>

        <programlisting language="java">// false로 평가된다
boolean falseValue = parser.parseExpression("'xyz' instanceof T(int)").getValue(Boolean.class);

// true로 평가된다
boolean trueValue = 
     parser.parseExpression("'5.00' matches '^-?\\d+(\\.\\d{2})?$'").getValue(Boolean.class);

// false로 평가된다
boolean falseValue = 
     parser.parseExpression("'5.0067' matches '^-?\\d+(\\.\\d{2})?$'").getValue(Boolean.class);

</programlisting>
      <para>각 심볼릭 연산자는 순수하게 연문자로 지정할 수도 있다. 표현식을 내장하는 문서형식에서(예를 들면 XML 문서) 
      특별한 의미를 가지는 기호를 사용할 때 발생할 수 있는 문제를 피하기 위해서 사용한다. 문자표현은 다음과 
      같다. lt ('&lt;'), gt ('&gt;'), le ('&lt;='), ge ('&gt;='),
      eq ('=='), ne ('!='), div ('/'), mod ('%'), not ('!').
      대소문자는 구별하지 않는다.</para>
      </section>

      <section>
        <title>논리 연산자</title>

        <para>and, or, not 같은 논리 연산자를 지원한다. 사용방법은 다음 예제에 
        나온다.</para>

        <para><programlisting language="java">// -- AND --

// false로 평가된다
boolean falseValue = parser.parseExpression("true and false").getValue(Boolean.class);

// true로 평가된다
String expression =  "isMember('Nikola Tesla') and isMember('Mihajlo Pupin')";
boolean trueValue = parser.parseExpression(expression).getValue(societyContext, Boolean.class);

// -- OR --

// true로 평가된다
boolean trueValue = parser.parseExpression("true or false").getValue(Boolean.class);

// true로 평가된다
String expression =  "isMember('Nikola Tesla') or isMember('Albert Einstien')";
boolean trueValue = parser.parseExpression(expression).getValue(societyContext, Boolean.class);

// -- NOT --

// false로 평가된다
boolean falseValue = parser.parseExpression("!true").getValue(Boolean.class);


// -- AND and NOT --
String expression =  "isMember('Nikola Tesla') and !isMember('Mihajlo Pupin')";
boolean falseValue = parser.parseExpression(expression).getValue(societyContext, Boolean.class);</programlisting></para>
      </section>

      <section>
        <title>수식 연산자</title>

        <para>더하기 연산자를 숫자, 문자열 날짜에서 사용할 수 있다. 빼기는 숫자와 날짜에서 사용할 
        수 있다. 곱하기와 나누기는 숫자에서만 사용할 수 있다. 다른 수식 연산자로 계수(%)와 지수(^)를 
        지원한다. 표준 연산자를 우선적으로 처리한다. 이러한 연산자는 다음 예제에서 보여준다.</para>

        <para><programlisting language="java">// 더하기
int two = parser.parseExpression("1 + 1").getValue(Integer.class); // 2

String testString = 
   parser.parseExpression("'test' + ' ' + 'string'").getValue(String.class);  // 'test string'

// 빼기
int four =  parser.parseExpression("1 - -3").getValue(Integer.class); // 4

double d = parser.parseExpression("1000.00 - 1e4").getValue(Double.class); // -9000

// 곱하기
int six =  parser.parseExpression("-2 * -3").getValue(Integer.class); // 6

double twentyFour = parser.parseExpression("2.0 * 3e0 * 4").getValue(Double.class); // 24.0

// 나누기
int minusTwo =  parser.parseExpression("6 / -3").getValue(Integer.class); // -2

double one = parser.parseExpression("8.0 / 4e0 / 2").getValue(Double.class); // 1.0

// 계수(Modulus)
int three =  parser.parseExpression("7 % 4").getValue(Integer.class); // 3

int one = parser.parseExpression("8 / 5 % 2").getValue(Integer.class); // 1

// 연산자 우선순위
int minusTwentyOne = parser.parseExpression("1+2-3*8").getValue(Integer.class); // -21
</programlisting></para>
      </section>
    </section>

    <section>
      <title>할당</title>

      <para>할당 연산자를 사용해서 프로퍼티를 설정한다. 
      이는 보통 <literal>setValue</literal> 호출내에서 이뤄지지만 
      <literal>getValue</literal>호출내에서도 이뤄질 수 있다.</para>

      <programlisting language="java">Inventor inventor = new Inventor();		
StandardEvaluationContext inventorContext = new StandardEvaluationContext(inventor);

parser.parseExpression("Name").setValue(inventorContext, "Alexander Seovic2");

// 대신에

String aleks = parser.parseExpression("Name = 'Alexandar Seovic'").getValue(inventorContext, 
                                                                            String.class);
</programlisting>

      <para></para>
    </section>

    <section>
      <title>타입</title>

      <para>특수한 'T' 연산자를 java.lang.Class ('type')의 인스턴스를 지정하는 데 사용할 
      수 있다. 정적 메서드도 이 연산자를 사용해서 호출한다. 
      <classname>StandardEvaluationContext</classname>는 타입을 찾으려고 
      <classname>TypeLocator</classname>를 사용하고 
      <classname>StandardTypeLocator</classname>(교체할 수 있다)는 java.lang 패키지로 
      만들어진다. 즉, java.lang 내에서 타입을 참조하는 T()는 정규화될 필요는 없지만 다른 
      모든 타입참조는 정규화되어야 한다.</para>

      <programlisting language="java">Class dateClass = parser.parseExpression("T(java.util.Date)").getValue(Class.class);

Class stringClass = parser.parseExpression("T(String)").getValue(Class.class);

boolean trueValue = 
   parser.parseExpression("T(java.math.RoundingMode).CEILING &lt; T(java.math.RoundingMode).FLOOR")
  .getValue(Boolean.class);
</programlisting>
    </section>

    <section>
      <title>생성자</title>

      <para>생성자는 새로운 연산자를 사용해서 호출할 수 있다. 프리미티브 타입과 String 
      외에는(int, float등이 사용될 수 있는) 모두 정규화된 클래스명을 사용해야 한다.</para>

      <programlisting language="java">Inventor einstein = 
  p.parseExpression("new org.spring.samples.spel.inventor.Inventor('Albert Einstein', 
                                                                   'German')")
                                                                   .getValue(Inventor.class);

//리스트의 add 메서드내에서 새로운 inventor 인스턴스를 생성한다
p.parseExpression("Members.add(new org.spring.samples.spel.inventor.Inventor('Albert Einstein',
                                                                   'German'))")
                                                                   .getValue(societyContext);
</programlisting>
    </section>

    <section id="expressions-ref-variables">
      <title>변수</title>

      <para>#변수명 문법을 사용해서 표현식내에서 변수를 참조할 수 있다. 
      StandardEvaluationContext에서 setVariable 메서드를 사용해서 
      변수를 설정한다.</para>

      <programlisting language="java">Inventor tesla = new Inventor("Nikola Tesla", "Serbian");
StandardEvaluationContext context = new StandardEvaluationContext(tesla);
context.setVariable("newName", "Mike Tesla");

parser.parseExpression("Name = #newName").getValue(context);

System.out.println(tesla.getName()) // "Mike Tesla"</programlisting>

      <section>
        <title>#this와 #root 변수</title>

        <para>#this 변수는 항상 정의되어 있고 현재 평가객체를(정규화되지 않은 참조를 처리하는 
        것에 대비해서) 참조한다. #root변수도 항상 정의되어 있고 루트 컨텍스트 객체를 참조한다. 
        #this가 평가되는 표현식 컴포넌트에 따라 다양하지만 #root는 항상 루트를 참조한다.</para>

        <programlisting language="java">// create an array of integers
List&lt;Integer&gt; primes = new ArrayList&lt;Integer&gt;();
primes.addAll(Arrays.asList(2,3,5,7,11,13,17));

// 파서를 생성하고 'primes' 변수를 정수 배열로 설정한다
ExpressionParser parser = new SpelExpressionParser();
StandardEvaluationContext context = new StandardEvaluationContext();
context.setVariable("primes",primes);

// 리스트에서 10보다 큰 모든 소수(?{...} 선택을 사용)
// [11, 13, 17]로 평가된다
List&lt;Integer&gt; primesGreaterThanTen = 
             (List&lt;Integer&gt;) parser.parseExpression("#primes.?[#this&gt;10]").getValue(context);

</programlisting>
      </section>

      <!--
        <section>
        <title>The #root variable</title>

        <para>The variable #root is always defined and refers to the
        root evaluation object.  This is the object against which the first unqualified 
        reference to a property or method is resolved.</para>
        
        <para>It differs from #this in that #this typically varies throughout the 
        evaluation of an expression, whilst #root remains constant.
        It can be useful when writing a selection criteria, where the decision
        needs to be made based on some property of the root object rather than the
        current collection element.  For example:</para>

        <programlisting language="java">List selection = (List)parser.parseExpression("#someList.?[#root.supports(#this)]").getValue();
</programlisting>
      </section>
      -->
    </section>

    <section id="expressions-ref-functions">
      <title>함수</title>

      <para>표현식 문자열내에서 호출할 수 있는 사용자 정의 함수를 등록해서 SpEL을 확장할 수 있다. 
      사용자 정의 함수는 메서드를 사용해서 <classname>StandardEvaluationContext</classname>에 
      등록한다.</para>

      <programlisting language="java">public void registerFunction(String name, Method m)</programlisting>

      <para>자바 메서드에 대한 참조는 함수의 구현체를 제공한다. 예를 들어 다음에서 문자열을 
      뒤집는 유틸리티 메서드를 보여준다.</para>

      <programlisting>public abstract class StringUtils {

  public static String reverseString(String input) {
    StringBuilder backwards = new StringBuilder();
    for (int i = 0; i &lt; input.length(); i++) 
      backwards.append(input.charAt(input.length() - 1 - i));
    }
    return backwards.toString();
  }
}</programlisting>

      <para>이 메서드를 평가 컨텍스트에 등록하고 표현식 문자열내에서 사용할 수 있다.</para>

      <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();
StandardEvaluationContext context = new StandardEvaluationContext();

context.registerFunction("reverseString", 
                         StringUtils.class.getDeclaredMethod("reverseString", 
                                                             new Class[] { String.class }));

String helloWorldReversed = 
          parser.parseExpression("#reverseString('hello')").getValue(context, String.class);</programlisting>
    </section>

    <section>
    	<title>빈(Bean) 참조</title>
      <para>평가 컨텍스트가 빈 리졸버로 설정되었다면 (@) 기호를 사용해서 표현식에서 빈을 검색하는 것이 가능하다.
      </para>
      <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();
StandardEvaluationContext context = new StandardEvaluationContext();
context.setBeanResolver(new MyBeanResolver());

// 평가하는 동안 MyBeanResolver에서 resolve(context,"foo")를 호출할 것이다
Object bean = parser.parseExpression("@foo").getValue(context);</programlisting>
    </section>
    
    <section>
      <title>3항 연산자 (If-Then-Else)</title>

      <para>표현식에서 if-then-else 조건을 위해 3항 연산자를 사용할 수 있다. 
      다음은 간단한 예제다.</para>

      <programlisting language="java">String falseString = 
             parser.parseExpression("false ? 'trueExp' : 'falseExp'").getValue(String.class);</programlisting>

      <para>이 경우에 false 불리언값으로 'falseExp' 문자열값을 리턴한다. 
      다음은 좀 더 실제적인 예제다.</para>

      <programlisting language="java">parser.parseExpression("Name").setValue(societyContext, "IEEE");
societyContext.setVariable("queryName", "Nikola Tesla");

expression = "isMember(#queryName)? #queryName + ' is a member of the ' " + 
             "+ Name + ' Society' : #queryName + ' is not a member of the ' + Name + ' Society'";

String queryResultString = 
                    parser.parseExpression(expression).getValue(societyContext, String.class);
// queryResultString = "Nikola Tesla is a member of the IEEE Society"</programlisting>

      <para>3항 연산자의 더 간단한 문법은 다은 섹션의 엘비스 연산자를 봐라.</para>
    </section>

    <section>
      <title>엘비스(Elvis) 연산자</title>

      <para>엘비스 연산자는 3항 연산자 문법의 단축형으로 <ulink
      url="http://groovy.codehaus.org/Operators#Operators-ElvisOperator(%3F%3A)">Groovy</ulink> 
      언어에서 사용된다. 보통 3항 연산자에서는 변수를 두번 반복해야 한다. 
      예를 들면 다음과 같다.</para>

      <programlisting>String name = "Elvis Presley";
String displayName = name != null ? name : "Unknown";</programlisting>

      <para>대신에 엘비스의 헤어스타일과 유사한 엘비스 연산자를 사용할 수 있다.</para>

      <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();

String name = parser.parseExpression("null?:'Unknown'").getValue(String.class);

System.out.println(name);  // 'Unknown'

</programlisting>

      <para>좀 더 복잡한 예제를 보자.</para>

      <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();

Inventor tesla = new Inventor("Nikola Tesla", "Serbian");
StandardEvaluationContext context = new StandardEvaluationContext(tesla);

String name = parser.parseExpression("Name?:'Elvis Presley'").getValue(context, String.class);

System.out.println(name); // Mike Tesla

tesla.setName(null);

name = parser.parseExpression("Name?:'Elvis Presley'").getValue(context, String.class);

System.out.println(name); // Elvis Presley</programlisting>
    </section>

    <section>
      <title>안전한 탐색(Navigation) 연산자</title>

      <para>안전한 탐색 연산자는 <literal>NullPointerException</literal>를 
      피하기 위해 사용하고 <ulink
      url="http://groovy.codehaus.org/Operators#Operators-SafeNavigationOperator(%3F.)">Groovy</ulink> 
      언어에서 가져왔다. 보통 객체를 참조할 때 메서드에 접근하거나 객체의 프로퍼티에 접근할 때 
      null이 아닌지 확인해야 한다. 이 작업을 하지 않기 위해 안전한 탐색 연산자는 예외를 
      던지는 대신에 null을 반환한다.</para>

      <programlisting language="java">ExpressionParser parser = new SpelExpressionParser();

Inventor tesla = new Inventor("Nikola Tesla", "Serbian");
tesla.setPlaceOfBirth(new PlaceOfBirth("Smiljan"));

StandardEvaluationContext context = new StandardEvaluationContext(tesla);

String city = parser.parseExpression("PlaceOfBirth?.City").getValue(context, String.class);
System.out.println(city); // Smiljan

tesla.setPlaceOfBirth(null);

city = parser.parseExpression("PlaceOfBirth?.City").getValue(context, String.class);

System.out.println(city); // null - NullPointerException을 던지지 않는다!!!</programlisting>
      <note>
        <para>엘비스 연산자를 표현식의 기본값을 설정하는데 사용할 수 있다. 예를 들어 
        <interfacename>@Value</interfacename> 표현식에서 다음과 같이 사용한다.</para>

        <programlisting>@Value("#{systemProperties['pop3.port'] ?: 25}")</programlisting>

        <para>이는 시스템 프로퍼티 <code>pop3.port</code>가 정의되어 있다면 
        <code>pop3.port</code>를 주입하고 정의되어 있지 않다면 25를 주입한다.</para>
      </note>
    </section>

    <section>
      <title>컬렉션 선택기능(Selection)</title>

      <para>선택기능(Selection)은 소스 컨텍션에서 언트리를 선택해서 다른 컬렉션으로 변환하는 
      강력한 표현식 언어의 기능이다.</para>

      <para>선택기능은 <literal>?[selectionExpression]</literal>의 문법을 사용한다. 
      선택기능은 컬렉션을 필터링해서 원래 요소의 서브셋을 가진 새로운 컬렉션을 반환한다. 예를 들어 
      선택기능으로 세르비아(Serbian) 발명가의 리스트를 쉽게 얻을 수 있다.</para>

      <programlisting language="java">List&lt;Inventor&gt; list = (List&lt;Inventor&gt;) 
      parser.parseExpression("Members.?[Nationality == 'Serbian']").getValue(societyContext);</programlisting>

      <para>선택기능은 리스트와 맵에서 도무 사용할 수 있다. 리스트의 경우 선택 크리테리아는 개별 
      리스트요소에 대해 평가되고 맵에서 선택 크리테리아는 맵의 각 엔트리에 대해 평가된다.
      (<literal>Map.Entry</literal> 자바 타입의 객체들) 맵 엔트리는 선택기능에서 사용하기 
      위해 프로퍼티로 접근할 수 있는 키와 값을 가진다.</para>

      <para>다음 표현식은 원래의 맵에서 27보다 작은 값을 가진 엔트리로 이루어진 새로운 맵을 
      반환한다.</para>

      <programlisting language="java">Map newMap = parser.parseExpression("map.?[value&lt;27]").getValue();</programlisting>

      <para>게다가 선택된 모든 요소에서 첫번째나 마지막 값을 획득하는 것도 가능한다. 선택기능의 
      <literal>^[...]</literal> 문법을 사용해서 매칭된 첫 엔트리를 획득하고 
      <literal>$[...]</literal>로 마지막 엔티르를 획득한다.</para>
    </section>

    <section>
      <title>컬렉션 투영(Projection)</title>

      <para>투영기능은 컬렉션에 하위 표현식을 평가해서 새로운 컬렉션을 반환한다. 투영 문법은 
      <literal>![projectionExpression]</literal>이다. 예제로 이해하는 것이 가장 쉬운데 
      발명가들의 리스트를 가지고 있지만 발명가들이 테어난 도시의 리스트를 원한다고 가정해보자. 발명가 
      리스트에서 모든 인트리에 대해 'placeOfBirth.city'를 효율적으로 평가하기를 원한다. 
      다음과 같이 투영을 사용한다.</para>

      <programlisting language="java">// [ 'Smiljan', 'Idvor' ]를 반환한다.
List placesOfBirth = (List)parser.parseExpression("Members.![placeOfBirth.city]");</programlisting>

      <para>맵에서도 투영기능을 사용할 수 있고 맵의 경우 투영 표현식은 맵의 각 엔트리마다(자바 
      <literal>Map.Entry</literal>로 표현되는) 평가된다. 맵의 투영결과는 맵의 각 엔트리에 
      대한 투영 표현식의 평가결과로 이루어진 리스트이다.</para>
    </section>

    <section>
      <title>표현식 템플릿</title>

      <para>표현식 템플릿으로 하나 이상의 평가 블럭을 가진 리터럴 문자를 섞을 수 있다. 각 평가 
      블럭은 사용자가 정의할 수 있는 접두사와 접미사로 구분되고 일반적으로는 구분자로 
      <literal>#{ }</literal>를 사용한다. 다음 예제를 보자.</para>

      <programlisting language="java">String randomPhrase = 
   parser.parseExpression("random number is #{T(java.lang.Math).random()}", 
                          new TemplateParserContext()).getValue(String.class);

// "random number is 0.7038186818312008"로 평가된다</programlisting>

      <para>#{ } 구분자내의 표현식을 평가한 결과(이 예제에서는 random() 메서드를 호출한 
      결과이다.)와 'random number is ' 리터럴 문자를 연결해서 문자열을 평가한다. 
      <literal>parseExpression()</literal> 메서드의 두번째 아규먼트는 
      <interfacename>ParserContext</interfacename>의 타입이다. 
      <interfacename>ParserContext</interfacename> 인터페이스는 표현식 템플릿 기능을 
      지원하려고 표현식을 어떻게 파싱하는 지에 영향을 주려고 사용한다. 
      <classname>TemplateParserContext</classname>의 정의는 다음에 나와있다.</para>

      <programlisting language="java">public class TemplateParserContext implements ParserContext {

  public String getExpressionPrefix() {
    return "#{";
  }

  public String getExpressionSuffix() {
    return "}";
  }
  
  public boolean isTemplate() {
    return true;
  }
}</programlisting>
    </section>
  </section>

  <section id="expressions-example-classes">
    <title>예제에 사용한 클래스들</title>

    <para>Inventor.java</para>

    <programlisting language="java">package org.spring.samples.spel.inventor;

import java.util.Date;
import java.util.GregorianCalendar;

public class Inventor {

  private String name;
  private String nationality;
  private String[] inventions;
  private Date birthdate;
  private PlaceOfBirth placeOfBirth;
  
  
  public Inventor(String name, String nationality)
  {
    GregorianCalendar c= new GregorianCalendar();
    this.name = name;
    this.nationality = nationality;
    this.birthdate = c.getTime();
  }
  public Inventor(String name, Date birthdate, String nationality) {
    this.name = name;
    this.nationality = nationality;
    this.birthdate = birthdate;
  }
  
  public Inventor() {
  }

  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public String getNationality() {
    return nationality;
  }
  public void setNationality(String nationality) {
    this.nationality = nationality;
  }
  public Date getBirthdate() {
    return birthdate;
  }
  public void setBirthdate(Date birthdate) {
    this.birthdate = birthdate;
  }
  public PlaceOfBirth getPlaceOfBirth() {
    return placeOfBirth;
  }
  public void setPlaceOfBirth(PlaceOfBirth placeOfBirth) {
    this.placeOfBirth = placeOfBirth;
  }
  public void setInventions(String[] inventions) {
    this.inventions = inventions;
  }
  public String[] getInventions() {
    return inventions;
  }       
}
</programlisting>

    <para>PlaceOfBirth.java</para>

    <programlisting language="java">package org.spring.samples.spel.inventor;

public class PlaceOfBirth {

	private String city;
	private String country;
	
	public PlaceOfBirth(String city) {
		this.city=city;
	}
	public PlaceOfBirth(String city, String country)
	{
		this(city);
		this.country = country;
	}
	
	
	public String getCity() {
		return city;
	}
	public void setCity(String s) {
		this.city = s;
	}
	public String getCountry() {
		return country;
	}
	public void setCountry(String country) {
		this.country = country;
	}

	
	
}
</programlisting>

    <para>Society.java</para>

    <programlisting language="java">package org.spring.samples.spel.inventor;

import java.util.*;

public class Society {

	private String name;
	
	public static String Advisors = "advisors";
	public static String President = "president";
	
	private List&lt;Inventor&gt; members = new ArrayList&lt;Inventor&gt;();
	private Map officers = new HashMap();

	public List getMembers() {
		return members;
	}

	public Map getOfficers() {
		return officers;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public boolean isMember(String name)
	{
		boolean found = false;
		for (Inventor inventor : members) {
			if (inventor.getName().equals(name))
			{
				found = true;
				break;
			}
		}		
		return found;
	}

	
}
</programlisting>
  </section>
</chapter>
