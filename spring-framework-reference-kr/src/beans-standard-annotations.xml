<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="beans-standard-annotations">
  <title>JSR 330 표준 어노테이션 사용</title>
  
  <para>스프링 3.0부터는 JSR-330 표준 어노테이션 (의존성 주입)을 지원한다.
  이러한 어노테이션들은 스프링 어노테이션과 같은 방법으로 스캔한다. 클래스패스에 적절한 jar를 두기만 하면 된다.
  </para>

  <note>
    <para>
      메이븐을 사용한다면 표준 메이븐 저장소(<ulink url="http://repo1.maven.org/maven2/javax/inject/javax.inject/1/">http://repo1.maven.org/maven2/javax/inject/javax.inject/1/</ulink>)에서 
      <interfacename>javax.inject</interfacename> artifact를 사용할 수 있다. 
      pom.xml 파일에 다음 의존성을 추가할 수 있다.
    </para>
    <programlisting language="xml">
&lt;dependency&gt;
    &lt;groupId&gt;javax.inject&lt;/groupId&gt;
    &lt;artifactId&gt;javax.inject&lt;/artifactId&gt;
    &lt;version&gt;1&lt;/version&gt;
&lt;/dependency&gt;</programlisting>
  </note>
  
  <section id="beans-inject-named">
    <title><interfacename>@Inject</interfacename>와 <interfacename>@Named</interfacename>를 사용한 의존성 주입</title>

    <para><interfacename>@Autowired</interfacename> 대신
      <interfacename>@javax.inject.Inject</interfacename> 를 다음처럼 사용할 수 있다.

    <programlisting language="java">import javax.inject.Inject;

public class SimpleMovieLister {

  private MovieFinder movieFinder;

  @Inject
  public void setMovieFinder(MovieFinder movieFinder) {
      this.movieFinder = movieFinder;
  }
  <lineannotation>// ...</lineannotation>
}</programlisting>
    </para>

    <para><interfacename>@Autowired</interfacename>를 사용하듯이 클래스레벨, 필드레벨, 메서드레벨, 
    생성자 아규먼트레벨에서 <interfacename>@Inject</interfacename>를 사용하는 것이 가능하다.

  주입되어야 하는 의존성에 검증된 이름을 사용하기를 좋아한다면 다음과 같이 <interfacename>@Named</interfacename> 어노테이션을 사용할 수 있다.

    <programlisting language="java">import javax.inject.Inject;
import javax.inject.Named;

public class SimpleMovieLister {

  private MovieFinder movieFinder;

  @Inject
  public void setMovieFinder(@Named("main") MovieFinder movieFinder) {
      this.movieFinder = movieFinder;
  }
  <lineannotation>// ...</lineannotation>
}</programlisting>	
	
    </para>
  </section>

<section id="beans-named">
    <title><interfacename>@Named</interfacename>: <interfacename>@Component</interfacename> 어노테이션과 동일한 표준</title>
    <para>
    <interfacename>@Component</interfacename> 대신에 <interfacename>@javax.inject.Named</interfacename>를 다음과 같이 사용할 수 있다.
        <programlisting language="java">import javax.inject.Inject;
import javax.inject.Named;
  
@Named("movieListener")
public class SimpleMovieLister {

  private MovieFinder movieFinder;

  @Inject
  public void setMovieFinder(MovieFinder movieFinder) {
      this.movieFinder = movieFinder;
  }
  <lineannotation>// ...</lineannotation>
}</programlisting>	
</para>

<para>
컴포넌트에 이름을 지정하지 않고 <interfacename>@Component</interfacename>를 
사용하는 것은 아주 일반적이다. 동일한 방법으로 <interfacename>@Named</interfacename>를 
사용할 수 있다.

    <programlisting language="java">import javax.inject.Inject;
import javax.inject.Named;
  
@Named
public class SimpleMovieLister {

  private MovieFinder movieFinder;

  @Inject
  public void setMovieFinder(MovieFinder movieFinder) {
      this.movieFinder = movieFinder;
  }
  <lineannotation>// ...</lineannotation>
}</programlisting>
</para>

<para>
<interfacename>@Named</interfacename>를 사용하면 스프링 어노테이션을 사용할 때와 완전히 
같은 방법으로 컴포넌트 스캔을 사용할 수 있다.

    <programlisting language="xml">&lt;beans&gt;
    &lt;context:component-scan base-package="org.example"/&gt;
&lt;/beans&gt;</programlisting>	
</para>
</section>

<section id="beans-standard-annotations-limitations">
    <title>표준 접근의 한계</title>

  <para>표준 어노테이션들을 사용해서 작업할 때 다음 표에 나온 것처럼 몇가지 중요한 기능들을 
  사용할 수 있다는 것을 꼭 알아야 한다.</para>
	
	 <para><table id="annotations-comparison">
          <title>스프링 어노테이션 vs. 표준 어노테이션</title>

          <tgroup cols="3">

            <colspec colnum="1" colwidth="0.7*" />
            <colspec colnum="2" colwidth="0.6*" />
            <colspec colnum="3" colwidth="1.5*" />

            <thead>
              <row>
                <entry>Spring</entry>
                <entry>javax.inject.*</entry>
                <entry>javax.inject의 제약 / 설명</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>@Autowired</entry>
                <entry>@Inject</entry>
                <entry>@Inject에는 'required'속성이 없다</entry>
              </row>
              <row>
                <entry>@Component</entry>
                <entry>@Named</entry>
                <entry>&mdash;</entry>
              </row>
              <row>
                <entry>@Scope("singleton")</entry>
                <entry>@Singleton</entry>
                <entry>
                  <para>
                    JSR-330의 기본 범위는 스프링의 <interfacename>prototype</interfacename>과 비슷하다.
                    하지만 스프링의 일반적인 기본값과 일관성을 유지하기 위해 스프링 컨테이너에서 선언된 
                    JSR-330 빈은 기본적으로 <interfacename>singleton</interfacename>이다. 
                    The JSR-330 default scope is like Spring's 
                    <interfacename>prototype</interfacename>. 
                    <interfacename>singleton</interfacename> 대신 다은 범위를 사용하려면 스프링의 
                    <interfacename>@Scope</interfacename> 어노테이션을 사용해야 한다.
                  </para>
                  <para>
                    <interfacename>javax.inject</interfacename>도 
                    <ulink url="http://download.oracle.com/javaee/6/api/javax/inject/Scope.html">@Scope</ulink> 어노테이션을 제공한다.
                    그렇기는 하지만 이 어노테이션은 자신만의 어노테이션을 생성할 때만 사용하도록 만들어졌다.
                  </para>
                </entry>
              </row>              
              <row>
                <entry>@Qualifier</entry>
                <entry>@Named</entry>
                <entry>&mdash;</entry>
              </row>  
               <row>
                <entry>@Value</entry>
                <entry>&mdash;</entry>
                <entry>동일한 것이 없다</entry>
              </row> 
               <row>
                <entry>@Required</entry>
                <entry>&mdash;</entry>
                <entry>동일한 것이 없다</entry>
              </row> 
               <row>
                <entry>@Lazy</entry>
                <entry>&mdash;</entry>
                <entry>동일한 것이 없다</entry>
              </row> 
            </tbody>     
          </tgroup>
         </table>
        </para>
	
	</section>

</section>