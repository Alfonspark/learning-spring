<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
 "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="mail">
  <title>이메일</title>

  <section id="mail-introduction">
    <title>소개</title>
	<sidebar>
		<title>라이브러리 의존성</title>
		<para>스프링 프레임워크의 이메일 라이브러리를 사용하려면 애플리케이션의 클래스패스에
    다음의 jar를 추가해야 한다.</para>
    <itemizedlist>
      <listitem>
        <para><ulink url="http://java.sun.com/products/javamail/">JavaMail</ulink> <filename class="libraryfile">mail.jar</filename> 라이브러리</para>
      </listitem>
      <listitem>
        <para><ulink url="http://java.sun.com/products/javabeans/jaf/downloads/index.html">JAF</ulink> <filename class="libraryfile">activation.jar</filename> 라이브러리</para>
      </listitem>
    </itemizedlist>
    <para>이 라이브러리들은 인터넷에서 무료로 구할 수 있다.</para>
	</sidebar>

    <para>스프링 프레임워크는 유용한 유틸리티 라이브러리를 제공하는데 이 라이브러리는 기반 메일링
  시스템의 특화된 부분에서 사용자를 보호하면서 이메일을 발송하고 클라이언트를 대신해서 저수준
  리소스 처리를 담당한다.</para>

    <para><literal>org.springframework.mail</literal> 패키지가 스프링 프레임워크 이메일 지원의
  최상위 패키지다. 이메일을 발송하는 중심 인터페이스는 <interfacename>MailSender</interfacename>
  인터페이스다. <emphasis>from</emphasis>, <emphasis>to</emphasis>같은 메일 속성들을 은닉화한
  간단한 값 객체(value object)는 <classname>SimpleMailMessage</classname> 클래스이다. 이
  패키지는 최상위 예외인 <exceptionname>MailException</exceptionname>를 던지는 저수준 메일
  시스템 예외를 고수준으로 추상화한 체크드 익셉션 계층도 포함되어 있다. 리치 메일 예외 계층에 대한
  자세한 내용은 JavaDoc을 참고해라.</para>

    <para><interfacename>org.springframework.mail.javamail.JavaMailSender</interfacename>
  인터페이스는 MIME 메시지처럼 특수한 <emphasis>JavaMail</emphasis> 기능을
  <interfacename>MailSender</interfacename> 인터페이스(혹은 이 인터페이스를 상속받은)에 추가한다.
  <interfacename>MailSender</interfacename>도 JavaMail MIME 메시지를 준비하기 위한 콜백
  인터페이스 <interfacename>org.springframework.mail.javamail.MimeMessagePreparator</interfacename>를
  제공한다.</para>

  </section>

	<section id="mail-usage">
		<title>사용방법</title>
		<para><interfacename>OrderManager</interfacename>라는 비즈니스 인터페이스가 있다고 가정해 보자.</para>
		<programlisting language="java"><![CDATA[public interface OrderManager {

    void placeOrder(Order order);
}]]></programlisting>

		<para>순서를 가진 이메일 메시지를 생성해야 하고 이 순서에 따라 고객에게 이메일을 발송해야 하는
    요구사항이 있다고 해보자.</para>

		<section id="mail-usage-simple">
			<title><interfacename>MailSender</interfacename>와 <classname>SimpleMailMessage</classname>의 기본 사용방법</title>
			<programlisting language="java"><![CDATA[import org.springframework.mail.MailException;
import org.springframework.mail.MailSender;
import org.springframework.mail.SimpleMailMessage;

public class SimpleOrderManager implements OrderManager {

    private MailSender mailSender;
    private SimpleMailMessage templateMessage;

    public void setMailSender(MailSender mailSender) {
        this.mailSender = mailSender;
    }

    public void setTemplateMessage(SimpleMailMessage templateMessage) {
        this.templateMessage = templateMessage;
    }

    public void placeOrder(Order order) {

        ]]><lineannotation>// 비즈니스 연산을 수행...</lineannotation><![CDATA[

        ]]><lineannotation>// 순서를 유지할 콜라보레이터를 호출...</lineannotation><![CDATA[

        ]]><lineannotation>// 템플릿 메시지를 스레드 세이프하게 "복사본"을 생성하고 커스터마이징한다</lineannotation><![CDATA[
        SimpleMailMessage msg = new SimpleMailMessage(this.templateMessage);
        msg.setTo(order.getCustomer().getEmailAddress());
        msg.setText(
            "Dear " + order.getCustomer().getFirstName()
                + order.getCustomer().getLastName()
                + ", thank you for placing order. Your order number is "
                + order.getOrderNumber());
        try{
            this.mailSender.send(msg);
        }
        catch(MailException ex) {
            ]]><lineannotation>// 로깅 등...</lineannotation><![CDATA[
            System.err.println(ex.getMessage());
        }
    }
}]]></programlisting>

			<para>위 코드의 빈 정의가 다음에 나와 있다.</para>
    		<programlisting language="xml"><![CDATA[<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
  <property name="host" value="mail.mycompany.com"/>
</bean>

]]><lineannotation>&lt;!-- 기본적인 상태로 미리 불러올 수 있는 템플릿 메시지 --&gt;</lineannotation><![CDATA[
<bean id="templateMessage" class="org.springframework.mail.SimpleMailMessage">
  <property name="from" value="customerservice@mycompany.com"/>
  <property name="subject" value="Your order"/>
</bean>

<bean id="orderManager" class="com.mycompany.businessapp.support.SimpleOrderManager">
  <property name="mailSender" ref="mailSender"/>
  <property name="templateMessage" ref="templateMessage"/>
</bean>]]></programlisting>

		</section>

		<section id="mail-usage-mime">
      <title><interfacename>JavaMailSender</interfacename>와 <classname>MimeMessagePreparator</classname> 사용하기</title>
			<para>다음은 <interfacename>MimeMessagePreparator</interfacename> 콜백 인터페이스를 사용하는
      <interfacename>OrderManager</interfacename>의 또 다른 구현체다. 이 경우
      <literal>mailSender</literal> 프로퍼티가 <interfacename>JavaMailSender</interfacename>
      타입이므로 JavaMail <classname>MimeMessage</classname> 클래스를 사용할 수 있다는
      점을 주의 깊게 봐라.</para>

			<programlisting language="java"><![CDATA[import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import javax.mail.internet.MimeMessage;
import org.springframework.mail.MailException;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessagePreparator;

public class SimpleOrderManager implements OrderManager {

    private JavaMailSender mailSender;

    public void setMailSender(JavaMailSender mailSender) {
        this.mailSender = mailSender;
    }

    public void placeOrder(final Order order) {

        ]]><lineannotation>// 비즈니스 연산을 수행...</lineannotation><![CDATA[

        ]]><lineannotation>// 순서를 유지할 콜라보레이터를 호출...</lineannotation><![CDATA[

        MimeMessagePreparator preparator = new MimeMessagePreparator() {

            public void prepare(MimeMessage mimeMessage) throws Exception {

                mimeMessage.setRecipient(Message.RecipientType.TO,
                        new InternetAddress(order.getCustomer().getEmailAddress()));
                mimeMessage.setFrom(new InternetAddress("mail@mycompany.com"));
                mimeMessage.setText(
                    "Dear " + order.getCustomer().getFirstName() + " "
                        + order.getCustomer().getLastName()
                        + ", thank you for placing order. Your order number is "
                        + order.getOrderNumber());
            }
        };
        try {
            this.mailSender.send(preparator);
        }
        catch (MailException ex) {
            ]]><lineannotation>// 로깅 등...</lineannotation><![CDATA[
            System.err.println(ex.getMessage());
        }
    }
}]]></programlisting>

			<note>
				<para>메일 코드는 크로스컷팅 관심(crosscutting concern)이고
        <link linkend="aop">custom Spring AOP aspect</link>로 리팩토링할 대상이
        될 수 있으며 이는 <interfacename>OrderManager</interfacename>를 대상으로 한
        적절한 조인포인트에서 실행될 수 있다.</para>
      </note>

      <para>스프링 프레임워크의 메일 지원은 JavaMail 구현체와 함께 제공된다. 더 자세한
      내용은 JavaDoc을 참고해라.</para>
		</section>

	</section>

	<section id="mail-javamail-mime">
		<title>JavaMail <classname>MimeMessageHelper</classname> 사용하기</title>

		<para>JavaMail 메시지를 상당히 편하게 다룰 수 있게 하는 클래스는
    <classname>org.springframework.mail.javamail.MimeMessageHelper</classname>로
    복잡한 JavaMail API를 편하게 사용할 수 있다.
    <classname>MimeMessageHelper</classname>를 사용하면
    <classname>MimeMessage</classname>를 아주 쉽게 생성할 수 있다.</para>
		<programlisting language="java"><lineannotation>// 당연히 실제 프로젝트에서는 DI를 사용할 것이다</lineannotation><![CDATA[
JavaMailSenderImpl sender = new JavaMailSenderImpl();
sender.setHost("mail.host.com");

MimeMessage message = sender.createMimeMessage();
MimeMessageHelper helper = new MimeMessageHelper(message);
helper.setTo("test@host.com");
helper.setText("Thank you for ordering!");

sender.send(message);]]></programlisting>

		<section id="mail-javamail-mime-attachments">
			<title>첨부 파일이나 리소스를 내장해서 발송하기</title>
			<para>첨부파일과 내장 리소스에 모두 멀티파트 이메일 메시지를 사용할 수 있다. 내장 리소스의
      예시로는 메시지에서 사용할 이미지나 스타일 시트 등인데 대신 첨부 파일로 보이기는 원치 않는
      리소스들이다.</para>
			<section id="mail-javamail-mime-attachments-attachment">
				<title>첨부파일</title>
				<para>다음 예제는 JPEG 이미지 첨부 파일이 있는 이메일을 보내는
        <classname>MimeMessageHelper</classname>의 사용방법을 보여준다.</para>
        <programlisting language="java"><![CDATA[JavaMailSenderImpl sender = new JavaMailSenderImpl();
sender.setHost("mail.host.com");

MimeMessage message = sender.createMimeMessage();

]]><lineannotation>// 멀티파트 메시지가 필요하다는 의미로 true 플래그를 사용한다</lineannotation><![CDATA[
MimeMessageHelper helper = new MimeMessageHelper(message, true);
helper.setTo("test@host.com");

helper.setText("Check out this image!");

]]><lineannotation>// 악명높은 윈도우의 Sample 파일을 첨부하자 (여기서는 c:/ 에서 복사한다)</lineannotation><![CDATA[
FileSystemResource file = new FileSystemResource(new File("c:/Sample.jpg"));
helper.addAttachment("CoolImage.jpg", file);

sender.send(message);]]></programlisting>
			</section>
			<section id="mail-javamail-mime-attachments-inline">
				<title>내장 리소스</title>
				<para>다음 예제는 내장 이미지를 가진 이메일을 보내는
        <classname>MimeMessageHelper</classname>의 사용방법을 보여준다.</para>
				<programlisting language="java"><![CDATA[JavaMailSenderImpl sender = new JavaMailSenderImpl();
sender.setHost("mail.host.com");

MimeMessage message = sender.createMimeMessage();

]]><lineannotation>// 멀티파트 메시지가 필요하다는 의미로 true 플래그를 사용한다</lineannotation><![CDATA[
MimeMessageHelper helper = new MimeMessageHelper(message, true);
helper.setTo("test@host.com");

]]><lineannotation>// 포함된 텍스트가 HTML이라는 의미로 true 플래그를 사용한다</lineannotation><![CDATA[
helper.setText("<html><body><img src='cid:identifier1234'></body></html>", true);

]]><lineannotation>// 악명높은 윈도우의 Sample 파일을 첨부하자 (여기서는 c:/ 에서 복사한다)</lineannotation><![CDATA[
FileSystemResource res = new FileSystemResource(new File("c:/Sample.jpg"));
helper.addInline("identifier1234", res);

sender.send(message);]]></programlisting>
				<warning>
					<para>특정 <literal>Content-ID</literal>로(이 예제에서는
          <literal>identifier1234</literal>) mime 메시지에 내장 리소스를 추가한다.
          추가하는 텍스트와 리소스의 순서는 <emphasis role="bold">아주</emphasis> 중요하다.
          <emphasis>텍스트를 먼저 추가하고</emphasis> 리소스를 나중에 추가해라. 반대로
          한다면 동작하지 않는다!</para>
				</warning>
			</section>
		</section>
		<section id="mail-templates">
			<title>템플릿 라이브러리로 이메일 콘텐츠를 생성하기</title>
			<para>앞의 예제에서는 이메일 메시지의 내용을
      <methodname>message.setText(..)</methodname>같은 메서드를 호출해서 명시적으로
      생성했다. 앞의 예제처럼 간단한 이메일이라면 괜찮다.(앞의 예제는 기본적인 API를 보여주기
      위함이었다.)</para>
      <para>하지만 전형적인 엔터프라이즈 애플리케이션이라면 여러 가지 이유로 위의 방법으로
      이메일의 내용을 만들지 않을 것이다.</para>
      <para>
        <itemizedlist>
          <listitem>
            <para>Java 코드로 HTML 기반의 이메일 내용을 생성하는 것은 지루하고 오류가 발생할 가능성도 크다</para>
          </listitem>
          <listitem>
            <para>표현 로직과 비즈니스 로직 간의 구분이 쉽지 않다</para>
          </listitem>
          <listitem>
            <para>이메일 내용의 표현 구조를 변경하려면 자바 코드를 수정하고 다시 컴파일한 다음에 배포해야 한다</para>
          </listitem>
        </itemizedlist>
      </para>
      <para>이 문제를 해결하는 일반적인 방법은 이메일 콘텐츠의 표현 구조를 정의할 때 FreeMarker나
      Velocity 같은 템플릿 라이브러리를 사용하는 것이다. 템플릿 라이브러리를 사용하면 코드는 데이터를
      생성하는 작업만 하고 이 데이터를 이메일 템플릿으로 렌더링해서 이메일을 발송한다. 이메일의 내용이
      꽤 복잡하더라도 템플릿을 사용하는 것이 아주 좋은 방법이고 스프링 프레임워크의 FreeMarker와
      Velocity 지원 클래스로 아주 쉽게 사용할 수 있다. Velocity 템플릿 라이브러리로 이메일
      내용을 생성하는 예제가 다음에 나와 있다.</para>
			<section id="mail-templates-example">
				<title>Velocity 기반 예제</title>
				<para>이메일 템플릿을 만들 때 <ulink url="http://velocity.apache.org">Velocity</ulink>를
        사용하려면 Velocity 라이브러리를 클래스패스에 두고 어플리케이션에서 사용할 이메일 컨텐츠의
        Velocity 템플릿을 하나이상 만들어야 한다. 이 예제에서 사용할 Velocity 템플릿이 다음에
        나와 있다. 예제에서 보듯이 템플릿은 HTML 기반이고 일반적인 텍스트이므로 자신이 선호하는 HTML
        에디터나 텍스트 에디터로 템플릿을 작성할 수 있다.</para>
				<programlisting language="xml"><lineannotation># <literal>com/foo/package</literal>에 있다</lineannotation><![CDATA[
<html>
<body>
<h3>Hi ${user.userName}, welcome to the Chipping Sodbury On-the-Hill message boards!</h3>

<div>
   Your email address is <a href="mailto:${user.emailAddress}">${user.emailAddress}</a>.
</div>
</body>

</html>]]></programlisting>
				<para>위의 Velocity 템플릿을 사용해서 이메일을 작성하고 보내는 간단한 코드와 스프링
        XML 설정이 다음에 나와 있다.</para>
				<programlisting language="java"><![CDATA[package com.foo;

import org.apache.velocity.app.VelocityEngine;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.mail.javamail.MimeMessagePreparator;
import org.springframework.ui.velocity.VelocityEngineUtils;

import javax.mail.internet.MimeMessage;
import java.util.HashMap;
import java.util.Map;

public class SimpleRegistrationService implements RegistrationService {

   private JavaMailSender mailSender;
   private VelocityEngine velocityEngine;

   public void setMailSender(JavaMailSender mailSender) {
      this.mailSender = mailSender;
   }

   public void setVelocityEngine(VelocityEngine velocityEngine) {
      this.velocityEngine = velocityEngine;
   }

   public void register(User user) {

      ]]><lineannotation>// 등록과 관련된 로직...</lineannotation><![CDATA[

      sendConfirmationEmail(user);
   }

   private void sendConfirmationEmail(final User user) {
      MimeMessagePreparator preparator = new MimeMessagePreparator() {
         public void prepare(MimeMessage mimeMessage) throws Exception {
            MimeMessageHelper message = new MimeMessageHelper(mimeMessage);
            message.setTo(user.getEmailAddress());
            message.setFrom("webmaster@csonth.gov.uk"); ]]><lineannotation>// 파라미터화할 수 있다...</lineannotation><![CDATA[
            Map model = new HashMap();
            model.put("user", user);
            String text = VelocityEngineUtils.mergeTemplateIntoString(
               velocityEngine, "com/dns/registration-confirmation.vm", model);
            message.setText(text, true);
         }
      };
      this.mailSender.send(preparator);
   }
}]]></programlisting>
				<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

   <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
      <property name="host" value="mail.csonth.gov.uk"/>
   </bean>

   <bean id="registrationService" class="com.foo.SimpleRegistrationService">
      <property name="mailSender" ref="mailSender"/>
      <property name="velocityEngine" ref="velocityEngine"/>
   </bean>

   <bean id="velocityEngine" class="org.springframework.ui.velocity.VelocityEngineFactoryBean">
      <property name="velocityProperties">
         <value>
          resource.loader=class
          class.resource.loader.class=org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader
         </value>
      </property>
   </bean>

</beans>]]></programlisting>
			</section>
		</section>
	</section>

</chapter>
