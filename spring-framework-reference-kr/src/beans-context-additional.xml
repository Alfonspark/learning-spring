<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="context-introduction">
  <title><interfacename>ApplicationContext</interfacename>의 
    추가적인 기능들</title>

  <!-- MLP: Beverly to review paragraph and list -->

  <para>이 챕터의 도입부에서 얘기했듯이 <literal>org.springframework.beans.factory</literal> 
    패키지는 프로그래밍적인 방법을 포함해서 빈을 관리하고 조작하는 기본적인 기능을 제공한다. 
    <literal>org.springframework.context</literal> 패키지는 추가적으로 더 
    <emphasis>어플리케이션 프레임워크 지향적인 스타일</emphasis>로 추가적인 기능을 제공하려고 
    다른 인터페이스를 확장하는 <interfacename>BeanFactory</interfacename> 인터페이스를 확장한 <ulink
    url="http://static.springframework.org/spring/docs/3.0.x/javadoc-api/org/springframework/context/ApplicationContext.html"
    ><interfacename>ApplicationContext</interfacename></ulink>를 추가한다. 완전히 
    선언적인 방법으로 <interfacename>ApplicationContext</interfacename>를 사용하는 많은 
    사람들은 프로그래밍으로는 생성조차 하지 않고 대신에 J2EE 웹 어플리케이션의 일반적인 시작과정의 
    일부로 <interfacename>ApplicationContext</interfacename>를 자동으로 인스턴스화 하려고 
    <classname>ContextLoader</classname>같은 지원 클래스에 의존한다.</para>

  <para>좀 더 프레임워크 지향적인 스타일로 <interfacename>BeanFactory</interfacename>의 
    기능을 강화하기 위해 context 패키지는 다음 기능도 제공한다.</para>

  <itemizedlist>
    <listitem>
      <para><interfacename>MessageSource</interfacename> 인터페이스로 
        <emphasis>i18n 스타일의 메세지 접근</emphasis></para>
    </listitem>

    <listitem>
      <para><interfacename>ResourceLoader</interfacename> 인터페이스로 URL이나 
        파일같은 <emphasis>리소스 접근</emphasis></para>
    </listitem>

    <listitem>
      <para><interfacename>ApplicationEventPublisher</interfacename> 인터페이스의 
        사용으로 <interfacename>ApplicationListener</interfacename> 인터페이스를 구현한 
        빈에 <emphasis>이벤트 발행(Event publication)</emphasis></para>
    </listitem>

    <listitem>
      <para><interfacename>HierarchicalBeanFactory</interfacename> 인터페이스로 
        어플리케이션의 웹 계층같은 특정 계층에 각각 집중하는 <emphasis>여러 가지 (계층적인) 
        컨텍스트의 로딩</emphasis></para>
    </listitem>
  </itemizedlist>

  <section id="context-functionality-messagesource">
    <title><interfacename>MessageSource</interfacename>를 
      사용한 국제화</title>

    <!-- MLP: Beverly to review this paragraph -->

    <para><interfacename>ApplicationContext</interfacename> 인터페이스는 
      <interfacename>MessageSource</interfacename>라는 인터페이스를 확장하므로 
      국제화 (i18n) 기능을 제공한다. 스프링은 메시지를 계층적으로 처리할 수 있는 
      <classname>HierarchicalMessageSource</classname> 인터페이스도 제공한다. 
      이 인터페이스들은 스프링이 메세지를 처리한 결과에 기반한 기초를 제공한다. 이 인터페이스들에서 
      정의된 메서드들은 다음을 포함한다.</para>

    <itemizedlist>
      <listitem>
        <para><methodname>String getMessage(String code, Object[] args, String
          default, Locale loc)</methodname>: <interfacename>MessageSource</interfacename>에서 
          메시지를 획득하기 위해 사용하는 기본 메서드. 지정한 로케일(locale)에 대한 메시지를 
          찾지 못하면 기본 메시지를 사용한다. 전달한 아규먼트는 표준 라이브러리에서 제공하는 
          <interfacename>MessageFormat</interfacename> 기능을 사용해서 대체값이 
          된다.</para>
      </listitem>

      <listitem>
        <para><methodname>String getMessage(String code, Object[] args, Locale
          loc)</methodname>: 본질적으로는 앞의 메서드와 같지만 한가지가 다르다: 기본 
          메시지를 지정할 수 없다. 메시지를 찾을 수 없다면 
          <classname>NoSuchMessageException</classname>를 던진다.</para>
      </listitem>

      <listitem>
        <para><methodname>String getMessage(MessageSourceResolvable resolvable,
          Locale locale)</methodname>: 앞의 메서드에서 사용했던 모든 프로퍼티들은 이 
          메서드에서 사용할 수 있는 <interfacename>MessageSourceResolvable</interfacename>라는 
          클래스로도 감싸진다.</para>
      </listitem>
    </itemizedlist>

    <para><interfacename>ApplicationContext</interfacename>가 로드되면 자동으로 컨텍스트에서 
      정의된 <interfacename>MessageSource</interfacename> 빈을 찾는다. 해당 빈을 찾으면 메시지 
      소스에 위임한 앞의 메서드들을 모두 호출한다. 메세지 소스가 없다면 
      <interfacename>ApplicationContext</interfacename>는 부모가 같은 이름의 빈을 가지고 
      있는지 찾아본다. 부모가 같은 이름의 빈을 가지고 있으면 그 빈을 
      <interfacename>MessageSource</interfacename>로 사용한다. 
      <interfacename>ApplicationContext</interfacename>가 어떤 메시지 소스도 찾을 수 없다면 
      위에서 정의한 메서스에 대한 호출을 받을 수 있도록 비어있는 
      <classname>DelegatingMessageSource</classname>를 인스턴스화 한다.</para>

    <para>스프링은 2개의 <interfacename>MessageSource</interfacename> 구현체를 제공하는데 
      <classname>ResourceBundleMessageSource</classname>와 
      <classname>StaticMessageSource</classname>이다. 둘다 중첩된 메세지를 처리하기 위해 
      <interfacename>HierarchicalMessageSource</interfacename>를 구현한다. 
      <classname>StaticMessageSource</classname>는 드물게 사용하지만 프로그래밍적인 방법으로 
      소스에 메시지를 추가하는 방법을 제공한다. <classname>ResourceBundleMessageSource</classname>는 
      다음 예제에 나와있다.</para>

    <programlisting language="xml">&lt;beans&gt;
&lt;bean id="messageSource"
      class="org.springframework.context.support.ResourceBundleMessageSource"&gt;
  &lt;property name="basenames"&gt;
    &lt;list&gt;
      &lt;value&gt;format&lt;/value&gt;
      &lt;value&gt;exceptions&lt;/value&gt;
      &lt;value&gt;windows&lt;/value&gt;
    &lt;/list&gt;
  &lt;/property&gt;
&lt;/bean&gt;
&lt;/beans&gt;</programlisting>

    <para>예제에서 클래스패스에 <literal>format</literal>, <literal>exceptions</literal>, 
      <literal>windows</literal>라는 3개의 리소스 번들이 정의되어 있다고 가정한다. 메시지를 
      처리하는 어떤 요청이라도 리소스번들을 통해 메시지를 처리하는 JDK 표준방법으로 다룰 것이다. 
      예제의 의도를 위해 위의 리소스 번들 파일 중 2개의 내용이 다음과 같다고 가정한다.</para>

    <programlisting language="java"><lineannotation># in format.properties</lineannotation>
message=Alligators rock!</programlisting>

    <programlisting language="java"><lineannotation># in exceptions.properties</lineannotation>
argument.required=The '{0}' argument is required.</programlisting>

    <para><classname>MessageSource</classname> 기능을 실행하는 프로그램은 다음 예제에 
      나와있다. 모든 <classname>ApplicationContext</classname> 구현체는 
      <classname>MessageSource</classname>의 구현체이기고 하므로 
      <classname>MessageSource</classname> 인터페이스로 캐스팅 될 수 있다는 것을 
      기억해라.</para>

    <programlisting language="java">public static void main(String[] args) {
  MessageSource resources = new ClassPathXmlApplicationContext("beans.xml");
  String message = resources.getMessage("message", null, "Default", null);
  System.out.println(message);
}</programlisting>

    <para>위 프로그램은 다음과 같은 아웃풋이 될 것이다.</para>

    <programlisting>Alligators rock!</programlisting>

    <para>그래서 요약하자면 <classname>MessageSource</classname>는 클래스패스 루트경로에 
      있는 <literal>beans.xml</literal> 파일에 정의되어 있다. <literal>messageSource</literal> 
      빈 정의는 <literal>basenames</literal> 프로퍼티에서 다수의 리소스 번들을 참조한다. 
      <literal>basenames</literal> 프로퍼티의 리스트로 전달한 3개의 파일은 클래스패스 루트경로에 
      있는 파일들이고 각각 <literal>format.properties</literal>, 
      <literal>exceptions.properties</literal>, 
      <literal>windows.properties</literal>라는 이름이 된다.</para>

    <para>다음 예제는 메시지 검색을 위해 아규먼트를 전달하는 것을 보여준다. 이러한 아규먼트들을 
      문자열로 변환해서 검색 메시지의 플레이스홀더에 삽입할 것이다.</para>

    <programlisting language="xml">&lt;beans&gt;

  <lineannotation>&lt;!-- 이 <interfacename>MessageSource</interfacename>는 웹 어플리케이션에서 익숙하다 --&gt;</lineannotation>
  &lt;bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource"&gt;
      &lt;property name="basename" value="test-messages"/&gt;
  &lt;/bean&gt;

  <lineannotation>&lt;!-- 위의 <interfacename>MessageSource</interfacename>를 이 POJO에 주입한다 --&gt;</lineannotation>
  &lt;bean id="example" class="com.foo.Example"&gt;
      &lt;property name="messages" ref="messageSource"/&gt;
  &lt;/bean&gt;

&lt;/beans&gt;</programlisting>

    <programlisting language="java">public class Example {

  private MessageSource messages;

  public void setMessages(MessageSource messages) {
      this.messages = messages;
  }

  public void execute() {
      String message = this.messages.getMessage("argument.required",
          new Object [] {"userDao"}, "Required", null);
      System.out.println(message);
  }

}</programlisting>

    <para><methodname>execute()</methodname>를 호출의 결과는 다음과 
      같은 아웃풋이 될 것이다.</para>

    <programlisting>The userDao argument is required.</programlisting>

    <para>국제화 (i18n)와 관련해서 스프링의 여러가지 <classname>MessageResource</classname> 
      구현체는 표준 JDK <classname>ResourceBundle</classname>과 같은 로케일(locale) 처리방법과 
      장애복구 규칙을 따른다. 간단히 말해서 앞에서 정의한 <literal>messageSource</literal> 
      예제에서 영국 (en-GB) 로케일로 메시지를 처리하려면 <literal>format_en_GB.properties</literal>,
      <literal>exceptions_en_GB.properties</literal>, 
      <literal>windows_en_GB.properties</literal>파일을 각각 생성해야 한다.</para>

    <para>보통 로케일 처리는 어플리케이션 환경에 의해 관리된다. 이 예제에서 (영국) 메시지가 
      처리되어야 하는 로케일은 수정으로 지정한다.</para>

    <programlisting><lineannotation># exceptions_en_GB.properties 파일</lineannotation>
argument.required=Ebagum lad, the '{0}' argument is required, I say, required.</programlisting>

    <programlisting language="java">public static void main(final String[] args) {
  MessageSource resources = new ClassPathXmlApplicationContext("beans.xml");
  String message = resources.getMessage("argument.required",
      new Object [] {"userDao"}, "Required", Locale.UK);
  System.out.println(message);
}</programlisting>

    <para>위의 프로그램을 실행하면 다음과 같은 아웃풋이 될 것이다.</para>

    <programlisting>Ebagum lad, the 'userDao' argument is required, I say, required.</programlisting>

    <para>정의된 <classname>MessageSource</classname>에 대한 참조를 얻으려고 
      <classname>MessageSourceAware</classname> 인터페이스를 사용할 수도 있다. 
      <classname>MessageSourceAware</classname> 인터페이스를 구현한 
      <classname>ApplicationContext</classname>에서 정의된 어떤 빈이라도 빈이 생성되고 
      설정될 때 어플리케이션 컨텍스트의 <classname>MessageSource</classname>와 함께 
      주입된다.</para>

    <note>
      <para><emphasis><classname>ResourceBundleMessageSource</classname>에 대한 
        대안으로 스프링은 <classname>ReloadableResourceBundleMessageSource</classname> 
        클래스를 제공한다. 이 클래스는 같은 번들 파일 형식을 지원하지만 
        <classname>ResourceBundleMessageSource</classname> 구현체에 기반한 표준 JDK보다 
        더 유연하다.</emphasis> 특히 이 클래스는 어떤 스프링 리소스 위치(단지 클래스 패스가 아니라)에서도 
        파일을 읽을 수 있고 번들 프로퍼티파일의 핫 리로딩을 지원한다.(동시에 중간에서 이들을 캐싱한다.) 
        더 자세한 내용은 <classname>ReloadableResourceBundleMessageSource</classname> 자바독을 
        확인해 봐라.</para>
    </note>
  </section>

  <section id="context-functionality-events">
    <title>표준 이벤트와 커스텀 이벤트</title>

    <para><interfacename>ApplicationContext</interfacename>의 이벤트 핸들링은 
      <classname>ApplicationEvent</classname> 클래스와 
      <interfacename>ApplicationListener</interfacename> 인터페이스를 통해서 제공한다. 
      <interfacename>ApplicationListener</interfacename>인터페이스를 구현한 빈이 컨텍스트에 
      배포되면 <interfacename>ApplicationContext</interfacename>에 퍼블리싱되는 것을 
      <classname>ApplicationEvent</classname>가 얻을 때마다 빈에 통지한다. 본질적으로 이는 
      표준 <emphasis>Observer</emphasis> 디자인 패턴이다. 스프링은 다음과 같은 
      표준 이벤트를 제공한다.</para>

    <table id="beans-ctx-events-tbl">
      <title>내장 이벤트</title>

      <tgroup cols="2">
        <colspec colname="c1" colwidth="2*"/>

        <colspec colname="c2" colwidth="5*"/>

        <thead>
          <row>
            <entry>이벤트</entry>

            <entry>설명</entry>
          </row>
        </thead>

        <tbody>
          <row>
            <entry><classname>ContextRefreshedEvent</classname></entry>

            <entry><interfacename>ApplicationContext</interfacename>가 초기화되거나 
              갱신될 때 퍼블리싱된다. 예를 들어 
              <interfacename>ConfigurableApplicationContext</interfacename> 인터페이스의 
              <methodname>refresh()</methodname> 메서드를 사용하는 경우다. 여기서 "초기화"는 
              모든 빈이 로드되고 후처리자(post-processor) 빈을 탐지해서 활성화하고 싱글톤이 미리 
              인스턴스화되고 <interfacename>ApplicationContext</interfacename> 객체를 사용할 
              준비가 되었음을 의미한다. 컨텍스트가 닫히지 않는 한 여러 번 갱신될 수 있고 선택된 
              <interfacename>ApplicationContext</interfacename>는 사실 "핫" 리프레시등을 
              지원한다. 예를 들면 <classname>XmlWebApplicationContext</classname> 핫 리프레시를 
              지원하지만 <classname>GenericApplicationContext</classname>는 지원하지 
              않는다.</entry>
          </row>

          <row>
            <entry><classname>ContextStartedEvent</classname></entry>

            <entry><interfacename>ConfigurableApplicationContext</interfacename> 
              인터페이스의 <methodname>start()</methodname> 메서드를 사용해서 
              <interfacename>ApplicationContext</interfacename>이 시작될 때 퍼블리싱된다. 
              여기서 "시작한다"는 의미는 모든 <interfacename>Lifecycle</interfacename> 빈이 
              명시적으로 시작 신호를 받는다는 말이다. 이 신호는 보통 명시적인 멈춤 후에 빈을 
              재시작하는 데 사용하지만 자동 시작이 설정되지 않은 컴포넌트들을 시작하는 데도 
              사용할 수 있다. 초기화 때 시작되지 않은 컴포넌트들이 그 예이다.</entry>
          </row>

          <row>
            <entry><classname>ContextStoppedEvent</classname></entry>

            <entry><interfacename>ConfigurableApplicationContext</interfacename> 
              인터페이스의 <methodname>stop()</methodname> 메서드를 사용해서 
              <interfacename>ApplicationContext</interfacename>이 멈췄을 때 퍼블리싱된다. 
              여기서 "멈춘다"는 의미는 모든 <interfacename>Lifecycle</interfacename> 빈이 
              명시적인 멈춤 신호를 받는다는 뜻이다. 멈춰진 컨텍스트는 
              <methodname>start()</methodname> 호출로 재시작할 수 
              있다.</entry>
          </row>

          <row>
            <entry><classname>ContextClosedEvent</classname></entry>

            <entry><interfacename>ConfigurableApplicationContext</interfacename>의 
              <methodname>close()</methodname> 메서드를 사용해서 
              <interfacename>ApplicationContext</interfacename>이 닫혔을 때 퍼블리싱된다. 
              여기서 "닫힌다"는 의미는 모든 싱글톤 빈이 파괴되었다는 의미이다. 닫혀진 컨텍스트는 
              생명의 끝에 도달한다. 이 컨텍스트는 갱신하거나 재시작할 수 없다.</entry>
          </row>

          <row>
            <entry><classname>RequestHandledEvent</classname></entry>

            <entry>HTTP 요청이 서비스되는 모든 빈에 전하는 웹에 특정화된(web-specific) 
              이벤트. 이 이벤트는 요청이 완료된 <emphasis>후에</emphasis> 퍼블리싱된다. 
              이 이벤트는 스프링의 <classname>DispatcherServlet</classname>을 사용하는 
              웹 어플리케이션에만 적용할 수 있다.</entry>
          </row>
        </tbody>
      </tgroup>
    </table>

    <para>자신만의 커스텀 이벤트를 생성해서 퍼블리싱할 수도 있다. 이 예제는 
      스프링의 <classname>ApplicationEvent</classname> 기반 클래스를 확장하는 
      간단한 클래스를 보여준다.</para>

    <programlisting language="java">public class BlackListEvent extends ApplicationEvent {
  private final String address;
  private final String test;

  public BlackListEvent(Object source, String address, String test) {
      super(source);
      this.address = address;
      this.test = test;
  }

  <lineannotation>// 접근자와 그 외 메서드들...</lineannotation>
}</programlisting>

    <para>커스텀 <classname>ApplicationEvent</classname>를 퍼블리싱하려면 
      <interfacename>ApplicationEventPublisher</interfacename>의 
      <methodname>publishEvent()</methodname> 메서드를 호출해라. 보통 이는 
      <interfacename>ApplicationEventPublisherAware</interfacename>를 구현한 클래스를 
      생성하고 스프링 빈으로 등록함으로써 완료된다. 다음 예제는 이러한 클래스를 
      보여준다.</para>

    <programlisting language="java"><![CDATA[public class EmailService implements ApplicationEventPublisherAware {

  private List<String> blackList;
  private ApplicationEventPublisher publisher;

  public void setBlackList(List<String> blackList) {
      this.blackList = blackList;
  }

  public void setApplicationEventPublisher(ApplicationEventPublisher publisher) {
      this.publisher = publisher;
  }

  public void sendEmail(String address, String text) {
      if (blackList.contains(address)) {
          BlackListEvent event = new BlackListEvent(this, address, text);
          publisher.publishEvent(event);
          return;
      }
      ]]><lineannotation>// 이메일 보내기...</lineannotation><![CDATA[
  }
}]]></programlisting>

    <para>설정타임시에 스프링 컨테이너는 
      <interfacename>ApplicationEventPublisherAware</interfacename>를 구현한 
      <classname>EmailService</classname>를 탐지할 것이고 자동적으로 
      <methodname>setApplicationEventPublisher()</methodname>를 호출할 것이다. 
      실제로는 전달한 파라미터는 스프링 컨테이너 자체가 될 것이다. 
      <interfacename>ApplicationEventPublisher</interfacename> 인터페이스를 통해서 
      어플리케이션 컨텍스트와 간단히 상호작용한다.</para>

    <para>커스텀 <classname>ApplicationEvent</classname>를 받으려면 
      <interfacename>ApplicationListener</interfacename>를 구현한 클래스를 생성하고 
      스프링 빈으로 등록해라. 다음 에제는 이러한 클래스를 보여준다.</para>

    <programlisting language="java"><![CDATA[public class BlackListNotifier implements ApplicationListener<BlackListEvent> {

  private String notificationAddress;

  public void setNotificationAddress(String notificationAddress) {
      this.notificationAddress = notificationAddress;
  }

  public void onApplicationEvent(BlackListEvent event) {
]]><lineannotation>        // notificationAddress를 통해서 적절한 같은 그룹에 알린다...</lineannotation><![CDATA[
  }
}]]></programlisting>

    <para><interfacename>ApplicationListener</interfacename>는 일반적으로 커스텀 이벤트의 
      타입인 <classname>BlackListEvent</classname>으로 파라미터화된다. 이는 
      <methodname>onApplicationEvent()</methodname> 메서드가 타입세이프할 수 있고 다운캐스팅이 
      필요한 경우를 피한다는 의미이다. 필요한 만큼의 많은 이벤트 리스터를 등록할 수 있지만 기본적으로 
      이벤트 리스너는 동기적으로 이벤트를 받는다. 이는 모든 리스너가 이벤트 처리를 완료할 때까지 
      <methodname>publishEvent()</methodname>가 블락된다는 의미이다. 이 동기방식과 싱글쓰레드 
      접근의 한가지 이점은 리스너가 이벤트를 받을 때 트랜잭션 컨텍스트를 사용할 수 있으면 퍼블리셔의 
      트랜젝션 컨텍스트내에서 수행된다는 것이다. 이벤트 발행에 대한 또다른 전략이 필요하다면 
      스프링의 <interfacename>ApplicationEventMulticaster</interfacename> 인터페이스에 
      대한 JavaDoc을 참고해라.</para>

    <para>다음 예제는 위의 클래스 각각을 등록하고 설정하는 빈 정의를 
      보여준다.</para>
    <programlisting language="xml"><![CDATA[<bean id="emailService" class="example.EmailService">
  <property name="blackList">
      <list>
          <value>known.spammer@example.org</value>
          <value>known.hacker@example.org</value>
          <value>john.doe@example.org</value>
      </list>
  </property>
</bean>

<bean id="blackListNotifier" class="example.BlackListNotifier">
  <property name="notificationAddress" value="blacklist@example.org"/>
</bean>]]></programlisting>

    <para><literal>emailService</literal>빈의 <methodname>sendEmail()</methodname>를 
      호출할 때 블랙리스트에 있는 이메일이 있다면 <classname>BlackListEvent</classname> 
      타입의 커스텀 이벤트가 퍼블리시된다. <literal>blackListNotifier</literal> 빈이 
      <interfacename>ApplicationListener</interfacename>으로 등록되므로 
      <classname>BlackListEvent</classname>를 받아서 적당한 같은 그룹에게 
      알릴 수 있다.</para>

    <note>
      <para>스프링의 이벤트 메카니즘은 같은 어플리케이션 컨텍스트내의 스프링 빈간의 간단한 
        통신을 위해 디자인되었다. 하지만 더 복잡한 엔터프리이즈 통합이 필요하면 따로 관리되는 
        <ulink url="http://springsource.org/spring-integration">Spring
        Integration</ulink> 프로젝트가 잘 알려진 스프링 프로그래밍 모델에 기반해서 경량이고 
        <ulink url="http://www.enterpriseintegrationpatterns.com"
        >패턴지향(pattern-oriented)</ulink>이고 이벤트기반의 아키텍쳐를 구성하는데 대한 
        완전한 지원을 제공한다.</para>
    </note>
  </section>

  <section id="context-functionality-resources">
    <title>저수준 리소스에 편리하게 접근하기</title>

    <para>어플리케이션 컨텍스트의 가장 바람직한 사용과 이해를 위해서는 
      <xref linkend="resources"/> 챕터에서 설명했듯이 사용자들은 보통 스프링의 
      <interfacename>Resource</interfacename> 추상화에 스스로 익숙해져야 
      한다.</para>

    <para>어플리케이션 컨텍스트는 <interfacename>Resource</interfacename>를 로드하는데 
      사용할 수 있는 <interfacename>ResourceLoader</interfacename>이다. 
      <interfacename>Resource</interfacename>는 본질적으로 JDK <literal>java.net.URL</literal> 
      클래스의 더 많은 기능이 있는 리치(rich) 버전이다. 사실 
      <interfacename>Resource</interfacename> 구현체는 적절한 위치에서 
      <literal>java.net.URL</literal>의 인스턴스를 감싼다. 
      <interfacename>Resource</interfacename>는 투명한 방법으로 클래스패스, 파일시스템 위치, 
      표준 URL로 나타낼 수 있는 위치 등 거의 대부분의 위치에서 저수준 리소스들을 획득할 수 있다. 
      리소스 위치 문자열이 어떤 특별한 접두사가 없는 간단한 경로라면 이라한 리소스의 위치는 실제 
      어플리케이션 타입을 지정하고 사용한다.</para>

    <para>어플리케이션 컨텍스트에 배포한 빈이 특별한 콜백 인터페이스인 
      <interfacename>ResourceLoaderAware</interfacename>를 구현하도록 설정할 수 있다. 
      이렇게 함으로써 <interfacename>ResourceLoader</interfacename>처럼 어플리케이션 
      컨텍스트 자체에 전달된 것을 초기화 시에 자동적으로 다시 호출하게 한다. 정적 리소스에 
      접근하도록 <interfacename>Resource</interfacename> 타입의 프로퍼티를 노출할 수도 있다. 
      정적 리소스들은 다른 프로퍼티처럼 주입될 것이다. 이러한 <interfacename>Resource</interfacename> 
      프로퍼티들을 간단한 경로 문자열로 지정할 수도 있고 빈이 배포될 때 해당 문자열을 실제 
      <interfacename>Resource</interfacename> 객체로 변환하도록 하기 위해 컨텍스트가 
      자동으로 등록하는 특별한 JavaBean <interfacename>PropertyEditor</interfacename>에 
      의존할 수도 있다.</para>

    <para><interfacename>ApplicationContext</interfacename> 생성자에 전달한 위치 
      경로(location path)는 실제로 리소스 문자열이며 간단한 형식으로 적절하게 특정정한 컨텍스트 
      구현체처럼 다뤄진다. <classname>ClassPathXmlApplicationContext</classname>는 간단한 
      위치 경로를 클래스패스 위치처럼 다룬다. 실제 컨텍스트 타입에 상관없이 클래스패스나 URL에서 
      정의를 강제로 로드하도록 특별한 접두사를 가진 위치 경로(리소스 문자열)를 사용할 수도 
      있다.</para>
  </section>

  <section id="context-create">
    <title>웹 어플리케이션에 펀리한 
      <interfacename>ApplicationContext</interfacename> 인스턴스화</title>

    <para><classname>ContextLoader</classname>등을 사용해서 선언적으로 
      <interfacename>ApplicationContext</interfacename> 인스턴스를 생성할 수 있다. 
      물론 <interfacename>ApplicationContext</interfacename> 구현체중 하나를 사용해서 
      프로그래밍적으로 생성할 수도 있다.</para>

    <para><classname>ContextLoader</classname> 메카니즘은 
      <classname>ContextLoaderListener</classname>와 
      <classname>ContextLoaderServlet</classname> 두 가지에서 왔다. 이 둘은 같은 기능이지만 
      서블릿 2.3 컨테이너에서 신뢰할 수 없는 리스너 버전이 다르다. 서블릿 2.4 명세에서 서블릿
      컨텍스트 리스너는 웹 어플리케이션의 서블릿 컨텍스트가 생성되자 마자 즉시 실행되어야 하고 
      첫번째 요청을 서비스할 수 있어야 한다.(그리고 서블릿 컨텍스트가 셧다운되어야 한다는 부분도 있다.) 
      이러한 서블릿 컨텍스트 리스너는 스프링 <interfacename>ApplicationContext</interfacename>를 
      초기화하기에 이상인 곳이다. 모든 것이 같다면 아마도 <classname>ContextLoaderListener</classname>이 
      더 나을 것이다. 호환성에 대한 더 자세한 정보는 <classname>ContextLoaderServlet</classname> 
      자바독을 봐라.</para>

    <para>다음과 같이 <classname>ContextLoaderListener</classname>를 사용해서 
      <interfacename>ApplicationContext</interfacename>를 등록할 수 있다.</para>

    <programlisting language="xml">&lt;context-param&gt;
&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
&lt;param-value&gt;/WEB-INF/daoContext.xml /WEB-INF/applicationContext.xml&lt;/param-value&gt;
&lt;/context-param&gt;

&lt;listener&gt;
&lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
&lt;/listener&gt;

<lineannotation>&lt;!-- 또는 위의 리스너 대신 <classname>ContextLoaderServlet</classname>를 사용한다</lineannotation><emphasis>
&lt;servlet&gt;
&lt;servlet-name&gt;context&lt;/servlet-name&gt;
&lt;servlet-class&gt;org.springframework.web.context.ContextLoaderServlet&lt;/servlet-class&gt;
&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
&lt;/servlet&gt;
--</emphasis>&gt;</programlisting>

    <para>리스너는 <literal>contextConfigLocation</literal> 파라미터를 검사한다. 파라미터가 
      존재하지 않으면 리스너는 기본값인 <literal>/WEB-INF/applicationContext.xml</literal>를 
      사용한다. 파라미터가 <emphasis>존재하면</emphasis> 리스너는 미리 정의된 구분자 (콤마, 
      세미콜론, 공백)로 문자열을 분리하고 어플리케이션 컨텍스트를 검색해야하는 위치로 이 값을 사용한다. 
      Ant 스타일 경로 패턴도 잘 지원한다. 예제들은 모두 "Context.xml"로 끝나는 파일명을 가지고 
      "WEB-INF" 디렉토리에 있는 <literal>/WEB-INF/*Context.xml</literal>와 "WEB-INF"의 
      하위디렉토리에 있는 이러한 모든 파일인 <literal>/WEB-INF/**/*Context.xml</literal>
      이다.</para>

    <para><classname>ContextLoaderListener</classname> 대신에
      <classname>ContextLoaderServlet</classname>를 사용할 수 있다. 서블릿은 마치 리스너가 
      하는 것처럼 <literal>contextConfigLocation</literal> 파라미터를 사용한다.</para>
  </section>

  <section>
    <title>J2EE RAR 파일처럼 스프링 ApplicationContext 배포하기</title>

    <para>스프링 2.5부터는 컨텍스트와 필요한 모든 빈 클래스와 라이브러리 JAR 파일들을 J2EE RAR 
      배포유닛으로 은닉화해서 RAR 파일로 스프링 ApplicationContext를 배포하는 것이 가능하다. 
      이는 단독으로 어클리케이션 컨텍스트를 실행한 것과 동일하며 단지 J2EE 환경에 호스팅해서 
      J2EE 서버 시설들에 접근할 수 있게 된 것이다. RAR 배포는 헤드없이 WAR 파일을 배포하는 
      시나리오보다 더 자연스러운 대안이다. 헤드없는 WAR 파일이라는 것은 J2EE 환경에서 스프링 
      어플리케이션컨텍스트를 시작하는데만 사용하는 HTTP 진입점이 없는 WAR 파일을 
      말한다.</para>

    <para>RAR 배포는 HTTP 진입점이 필요없는 어플리케이션 컨텍스트의 이상형이라기 보다는 메시지 
      앤드포인트와 스케쥴된 잡들로만 이루어져있다. 이러한 컨텍스트의 빈들은 JTA 트랜잭션 매니저와 
      JNDI에 바인딩된 JDBC DataSource와 JMS ConnectionFactory 인스턴스같은 어플리케이션 서버 
      리소스들을 사용할 수 있고 플랫폼의 JMX서버와 함께 등록할 수도 있다. - 모든 것은 스프링의 표준 
      트랜잭션 관리와 JNDI, JMS 지원 부분을 통해서 이루어진다. 어플리케이션 컴포넌트는 스프링의 
      <interfacename>TaskExecutor</interfacename> 추상화로 어플리케이션 서버의 JCA 
      WorkManager와 상호작용도 할 수 있다.</para>

    <para>RAR 배포와 관련한 설정에 대한 자세한 내용은 <ulink
      url="http://static.springframework.org/spring/docs/3.0.x/javadoc-api/org/springframework/jca/context/SpringContextResourceAdapter.html"
      >SpringContextResourceAdapter</ulink> 클래스의 JavaDoc을 확인해라.</para>

    <para><emphasis>J2EE RAR파일로 스프링 ApplicationContext을 간단히 
      배포하려면:</emphasis> 모든 어플리케이션 클래스들을 표준 JAR 파일과는 다른 확장자인 
      RAR 파일로 패키징한다. RAR 아카이브의 루트에 필요한 라이브러리의 JAR를 모두 추가한다. 
      "META-INF/ra.xml" 배포 디스크립터(<classname>SpringContextResourceAdapter</classname>의 
      JavaDoc에 나온 것처럼)와 대응되는 스프링 XML 빈 정의 파일(보통 
      "META-INF/applicationContext.xml")을 추가하고 어플리케이션 서버의 배포 디렉토리에 
      최종 RAR 파일을 둔다.</para>

    <note>
      <para>이러한 RAR 배포 유닛들은 보통 독립적이다. 컴포넌트를 외부로 노출하지 않으며 심지어 
        같은 어플리케이션의 다른 모듈에도 노출하지 않는다. RAR 기반 ApplicationContext와의 
        상호작용은 보통 다른 모듈과 공유하는 JMS 목적지(destination)를 통해서 발생한다. 예를 
        들어 RAR 기반 ApplicationContext는 잡(job)을 스케쥴링하거나 파일 시스템의 새로운 파일에 
        반응하는 등의 일도 할 수 있다. 외부의 동기적인 접근을 허용하려면 예를 들어 같은 머신의 다른 
        어플리케이션 모듈이 사용할 RMI 엔드포인트를 익스포트할 수 있다.</para>
    </note>
  </section>
</section>
