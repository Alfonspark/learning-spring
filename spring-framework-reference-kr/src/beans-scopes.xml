<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section id="beans-factory-scopes">
  <title>빈(Bean) 범위</title>

  <para>빈 정의를 생성할 때 빈 정의로 정의한 클래스의 실제 인스턴스를 생성하기 위해 
    <emphasis>레시피를</emphasis> 만든다. 클래스처럼 하나의 레시피에서 많은 객체 
    인스턴스를 생성할 수 있다는 것을 의미하기 때문에 빈 정의가 레시피라는 개념은 
    중요하다.</para>
  <para>특정 빈 정의로 생성한 객체에 연결할 다양한 의존성과 설정값뿐만 아니라 생성된 객체의 
    <firstterm>범위</firstterm>도 제어할 수 있다. 이 접근방법은 자바 클래스 레벨에서 
    객체의 범위를 생성하는 대신에 설정을 통해서 생성한 객체들의 범위를 
    <emphasis>선택할</emphasis> 수 있으므로 강력하고 유연하다. 빈을 여러 가지 범위 중 
    하나로 정의할 수 있다. 스프링 프레임워크는 다섯가지 범위를 지원한다. 이 중 3가지는 
    웹기반의 <interfacename>ApplicationContext</interfacename>에서만 사용할 
    수 있다.</para>

  <para>다음과 같은 범위들이 준비되어 있다. 
    <link linkend="beans-factory-scopes-custom">커스텀 범위</link>를 만들 수도 있다.</para>

  <table id="beans-factory-scopes-tbl">
    <title>빈의 범위</title>

    <tgroup cols="2">
      <thead>
        <row>
          <entry align="center">범위</entry>

          <entry align="center">설명</entry>
        </row>
      </thead>

      <tbody>
        <row>
          <entry><para> <link linkend="beans-factory-scopes-singleton"
            >singleton</link> </para></entry>

          <entry><para>(기본값) 하나의 빈정의가 스프링 IoC 컨테이너마다 하나의 객체 
            인스턴스가 되는 범위</para></entry>
        </row>

        <row>
          <entry><para> <link linkend="beans-factory-scopes-prototype"
            >prototype</link> </para></entry>

          <entry><para>하나의 빈 정의가 다수의 객체 인스턴스가 되는 
            범위</para></entry>
        </row>

        <row>
          <entry><para> <link linkend="beans-factory-scopes-request"
            >request</link> </para></entry>

          <entry><para>하나의 빈 정의가 하나의 HTTP 요청의 라이프사이클이 되는 범위; 
            이는 각 HTTP 요청은 빈 정의로 부터 생성된 자신만의 빈 인스턴스를 갖는다. 
            웹 친화적인 스프링 <interfacename>ApplicationContext</interfacename>의 
            컨텍스트에서만 유효하다.</para></entry>
        </row>

        <row>
          <entry><para> <link linkend="beans-factory-scopes-session"
            >session</link> </para></entry>

          <entry><para>하나의 빈 정의가 하나의 HTTP <interfacename>Session</interfacename>의 
            라이프사이클이 되는 범위. 웹 친화적인 스프링 
            <interfacename>ApplicationContext</interfacename>의 컨텍스트에서만 
            유효하다.</para></entry>
        </row>

        <row>
          <entry><para> <link linkend="beans-factory-scopes-global-session"
            >global session</link> </para></entry>

          <entry><para>하나의 빈 정의가 전역적인 HTTP <interfacename>Session</interfacename>의 
            라이프사이클이 되는 범위. 보통 포틀릿(portlet) 컨텍스트내에서 사용할 때만 유효하다. 
            웹 친화적인 스프링 <interfacename>ApplicationContext</interfacename>의 
            컨텍스트에서만 유효하다.</para></entry>
        </row>
      </tbody>
    </tgroup>
  </table>

  <note>
    <title>스레드의 범위를 갖는 빈</title>

    <para>스프링 3.0에서는 <emphasis>스레드 범위</emphasis>를 사용할 수 있지만 
      기본적으로는 등록되어 있지 않다. 더 자세한 내용은 <ulink
      url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/context/support/SimpleThreadScope.html"
      >SimpleThreadScope</ulink>를 봐라. 스레드 범위나 다른 커스텀 범위를 등록하는 
      방법을 알고 싶다면 <xref linkend="beans-factory-scopes-custom-using"/>를 
      봐라.</para>
  </note>

  <section id="beans-factory-scopes-singleton">
    <title>싱글톤 범위</title>

    <para>싱글톤 빈의 유일하고 <emphasis>공유된 </emphasis>인스턴스로 관리되고 해당 
      빈으로 매칭되는 id의 빈의 모든 요청은 스프링 컨테이너가 같은 빈 인스턴스를 돌려준다.</para>

    <para>간단히 말해서 빈 정의를 싱글톤 범위로 정의하면 스프링 IoC 컨테이너는 해당 빈 정의로 
      정의된 객체의 <emphasis>정확히 하나의</emphasis> 인스턴스를 생성한다. 이 하나의 
      인스턴스는 싱글톤 빈 같은 캐시로 저장하고 해당 빈에 대한 <emphasis>이후의 모든 요청이나 
      참조에</emphasis> 캐시된 객체를 돌려준다.</para>

    <para><mediaobject>
      <imageobject role="fo">
        <imagedata align="center" fileref="images/singleton.png" format="PNG"/>
      </imageobject>

      <imageobject role="html">
        <imagedata align="center" fileref="images/singleton.png" format="PNG"/>
      </imageobject>
      </mediaobject></para>

    <para>스프링의 싱글톤 빈의 개념은 Gang of Four (GoF)의 패턴북에 나온 싱글톤 패턴과는 
      다르다. GoF 싱글톤은 특정 클래스에 대해서 <emphasis><classname>ClassLoader
      </classname>마다</emphasis> <emphasis>유일한</emphasis> 인스턴스가 생성되는 것처럼 
      객체의 범위를 하드코딩한다. 스프링 싱글톤의 범위는 <emphasis>컨테이너 마다, 빈 마다</emphasis>
      라는 것이 가장 좋은 설명이다. 이 말은 하나의 스프링 컨테이너에서 특정 클래스의 빈을 정의하면 
      스프링 컨테이너는 빈 정의의 클래스에 대한 <emphasis>유일한</emphasis> 인스턴스를 생성한다. 
      <emphasis>싱글톤 범위는 스프링의 기본범위이다.</emphasis> XML에서 싱글톤으로 빈을 정의하려면 
      다음과 같이 작성한다.</para>

    <programlisting language="xml">&lt;bean id="accountService" class="com.foo.DefaultAccountService"/&gt;

<lineannotation>&lt;!-- 장황하긴 하지만 다음처럼 해도 똑같다. (싱글톤 범위는 기본값이다) --&gt;</lineannotation>
&lt;bean id="accountService" class="com.foo.DefaultAccountService" scope="singleton"/&gt;</programlisting>
  </section>

  <section id="beans-factory-scopes-prototype">
    <title>프로토타입 범위</title>

    <para>싱글톤이 아닌 프로토타입 범위의 빈 배포는 특정한 빈에 대한 요청마다 
      <emphasis>새로운 빈(bean) 인스턴스를</emphasis> 생성한다. 이는 빈이 다른 빈에 
      주입되거나 컨테이너에 <literal>getBean()</literal> 메서드를 호출해서 빈을 요청하는 
      것을 의미한다. 규칙에 따라 상태를 가진 모든 빈에는 프로토타입 범위를 사용하고 상태가 없는 
      빈에는 싱글톤 범위를 사용해라.</para>

    <para>다음 다이어그램은 스프링의 프로토타입 범위를 나타낸다. <emphasis>전형적인 DAO는 
      주고받는 어떤 상태도 가지지 않기 때문에 데이터 접근 객체 (DAO)는 보통 프로토타입으로 
      설정하지 않는다.</emphasis><!--First it says diagram illustrates scope, but then says it's not typical of a prototype scope. Why not use realistic one? --></para>

    <para><mediaobject>
      <imageobject role="fo">
        <imagedata align="center" fileref="images/prototype.png" format="PNG"/>
      </imageobject>

      <imageobject role="html">
        <imagedata align="center" fileref="images/prototype.png" format="PNG"/>
      </imageobject>
      </mediaobject></para>

    <para>다음은 XML에서 빈을 프로토타입으로 정의하는 예제이다.</para>

    <programlisting language="xml"><lineannotation>&lt;!-- <literal>spring-beans-2.0.dtd</literal>의 사용 --&gt;</lineannotation>
&lt;bean id="accountService" class="com.foo.DefaultAccountService" scope="prototype"/&gt;</programlisting>

    <para>다름 범위와는 대조적으로 스프링은 프로토타입 빈의 완전한 라이프사이클을 관리하지 
      않는다. 컨테이너는 프로토타입 객체를 인스턴스화하고 설정하고 다른 방법으로 모은 다음에 
      프로토타입 인스턴스의 어떤 기록도 없이 클라이언트에 전달한다. 그러므로 <emphasis>초기화
      </emphasis> 라이프사이클 콜백 메서드가 범위와 관계없이 모든 객체에서 호출되었더라고 설정된 
      <emphasis>소멸</emphasis> 라이프사이클 콜백은 호출되지 <emphasis>않는다.</emphasis> 
      클라이언트 코드는 반드시 프로토타입 범위를 가진 객체를 정리해야 하고 프로토타입 빈이 잡고 있는 
      비싼 리소스들을 해제시켜야 한다. 스프링 컨테이너가 프로토타입 범위를 가진 빈이 붙잡고 있는 
      리소스를 해제하도록 하려면 정리되어야 하는 빈의 참조를 가진 커스텀 <link
      linkend="beans-factory-extension-bpp">bean post-processor</link>를 사용해 봐라.</para>

    <para>어떤 관점에서는 프로토타입 범위를 가진 빈에 관한 스프링 컨테이너의 역할이 자바의 
      <literal>new</literal> 오퍼레이터 대신이다. 그 관점에서 과거의 모든 라이프사이클 
      관리는 클라이언트에서 처리해야 합니다. (스프링 컨테이너의 빈 라이프사이클에 대한 자세한 
      내용은 <xref linkend="beans-factory-lifecycle"/>를 봐라.)</para>
  </section>

  <section id="beans-factory-scopes-sing-prot-interaction">
    <title>프로토타입 빈에 의존성이 있는 싱글톤 빈</title>

    <para>프로토타입 빈에 의존성이 있는 싱글톤 범위의 빈을 사용하면 <emphasis>인스턴스화 
      할 때 의존성이 처리된다는 것을</emphasis> 알아야 한다. 그러므로 싱글톤 범위의 빈에 
      프로토타입 범위의 빈을 의존성 주입하면 새로운 프로토타입 빈을 인스턴스화 한 후 싱글톤 
      빈에 의존성 주입한다. 이 프로토타입 인스턴스는 싱글톤 범위의 빈에 항상 제공되는 
      유일한 인스턴스이다.</para>

    <para>하지만 싱글톤 범위의 빈이 런타임시에 계속해서 프로토타입 범위를 가진 빈의 새로운 
      인스턴스를 얻어야 하는 경우를 생각해 보자. 의존성 주입은 스프링 컨테이너가 싱글톤 빈을 
      인스턴스화하고 빈의 의존성을 처리하고 주입할 때만 <emphasis>딱 한번</emphasis> 
      일어나므로 싱글톤 빈에 프로토타입 범위의 빈을 의존성 주입할 수 없다. 런타임에서 프로토타입 
      빈의 새로운 인스턴스가 하나이상 필요하다면 <xref
      linkend="beans-factory-method-injection"/>를 참고해라.</para>
  </section>

  <section id="beans-factory-scopes-other">
    <title>리퀘스트, 세션, 글로벌 세션 범위</title>

    <para><literal>request</literal>, <literal>session</literal>, 
      <literal>global session</literal> 범위는 웹기반 스프링 <interfacename>
      ApplicationContext</interfacename> 구현에서<emphasis>만</emphasis> 사용할 수 
      있다. 이러한 범위들을 <classname>ClassPathXmlApplicationContext</classname>같은 
      보통의 스프링 IoC 컨테이너와 함께 사용한다면 모르는 빈 범위라는 의미로 
      <classname>IllegalStateException</classname>이 발생한다.</para>

    <section id="beans-factory-scopes-other-web-configuration">
      <title>초기 웹 설정</title>

      <para><literal>request</literal>, <literal>session</literal>, 
        <literal>global session</literal> 레벨(웹 범위의 빈)에서 빈의 범위를 지원하려면 
        빈을 정의하기 전에 몇가지 마이너한 초기 설정을 해야한다. (이 초기 설정은 표준 범위인 
        싱글톤과 프로토타입 범위에서는 필요하지 <emphasis>않다.</emphasis>)</para>

      <para>특정한 서블릿 환경에 기반해서 이 초기 설정을 어떻게 해야하는가..</para>

      <para>스프링 웹 MVC 안에서(사실상은 요청안에서) 범위를 가진 빈에 접근하면 스프링 
        <classname>DispatcherServlet</classname>나 <classname>DispatcherPortlet</classname>이 
        처리하고 특별한 설정은 필요하지 않다. <classname>DispatcherServlet</classname>와 
        <classname>DispatcherPortlet</classname>는 이미 모든 연관된 상태를 
        드러낸다.</para>

      <para>스프링의 DispatcherServlet 밖에서 처리되는 요청이 있는 서블릿 2.4이상의 
        웹 컨테이너를 사용한다면(예를 들어 JSF나 스트럿츠(Struts)를 사용하는 경우) 
        웹 어플리케이션의 <literal>web.xml</literal> 파일에 다음 
        <interfacename>javax.servlet.ServletRequestListener</interfacename> 
        선언을 추가해야 한다.</para>

      <programlisting language="xml">&lt;web-app&gt;
...
&lt;listener&gt;
  &lt;listener-class&gt;
      org.springframework.web.context.request.RequestContextListener
  &lt;/listener-class&gt;
&lt;/listener&gt;
...
&lt;/web-app&gt;</programlisting>

      <para>더 오래된 웹 컨테이너 (Servlet 2.3)를 사용한다면 제공되는 
        <interfacename>javax.servlet.Filter</interfacename> 구형체를 사용해라. 
        서블릿 2.3 컨테이너에서 스프링의 DispatcherServlet 밖의 요청에서 웹 범위를 가진 
        빈에 접근하려면 웹 어플리케이션의 <literal>web.xml</literal> 파일에 다음의 XML 
        설정을 포함시켜야 한다.(필터는 웹 어플리케이션 환경에 기반에서 매핑되므로 웹 어플리케이션 
        환경을 적절하게 수정해야 한다.)</para>

      <programlisting language="xml">&lt;web-app&gt;
..
&lt;filter&gt;
  &lt;filter-name&gt;requestContextFilter&lt;/filter-name&gt;
  &lt;filter-class&gt;org.springframework.web.filter.RequestContextFilter&lt;/filter-class&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
  &lt;filter-name&gt;requestContextFilter&lt;/filter-name&gt;
  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
...
&lt;/web-app&gt;</programlisting>

      <para><classname>DispatcherServlet</classname>,
        <classname>RequestContextListener</classname>, 
        <classname>RequestContextFilter</classname>는 모두 완전히 같은 일을 한다. 
        즉, HTTP 요청 객체를 해당 요청을 서비스하는 <classname>Thread</classname>에 
        바인딩한다. 이는 요청이나 세션범위의 빈을 콜 체인(call chain)에서 이용가능하도록 
        한다.</para>
    </section>

    <section id="beans-factory-scopes-request">
      <title>요청 범위(Request scope)</title>

      <para>다음 빈 정의를 보자.</para>

      <programlisting language="xml">&lt;bean id="loginAction" class="com.foo.LoginAction" scope="request"/&gt;</programlisting>

      <para>스프링 컨테이너는 모든 HTTP 요청에 대해서 <literal>loginAction</literal> 
        빈 정의를 사용해서 <classname>LoginAction</classname> 빈의 새로운 인스턴스를 
        생성한다. <literal>loginAction</literal>빈은 HTTP 요청 레벨의 범위가 된다. 
        같은 <literal>loginAction</literal> 빈 정의로 생성된 다른 인스턴스들은 이러한 
        상태변화를 볼 수 없기 때문에 생성된 인스턴스의 내부 상태를 원하는 대로 수정할 수 있다. 
        인스턴스들은 각 요청에 개별적이다. 요청의 처리가 완료되었을 때 요청 범위의 빈은 
        버려진다.</para>
    </section>

    <section id="beans-factory-scopes-session">
      <title>세션 범위(Session scope)</title>

      <para>다음 빈 정의를 보자.</para>

      <programlisting language="xml">&lt;bean id="userPreferences" class="com.foo.UserPreferences" scope="session"/&gt;</programlisting>

      <para>스프링 컨테이너는 단일 HTTP <interfacename>Session</interfacename>의 
        생명주기에 대해서 <literal>userPreferences</literal> 빈 정의를 사용해서 
        <classname>UserPreferences</classname> 빈의 새로운 인스턴스를 생성한다. 
        다시 말하면 <literal>userPreferences</literal> 빈은 HTTP 
        <interfacename>Session</interfacename> 레벨에서 유효한 범위가 된다. 
        <literal>요청 범위의</literal> 빈처럼 생성된 인스턴스의 내부 상태를 원하는 만큼 
        바꿀 수 있다. 같은 <literal>userPreferences</literal> 빈 정의에서 생성된 인스턴스를 
        사용하는 다른 HTTP <interfacename>Session</interfacename> 인스턴스는 개별적인 HTTP 
        <interfacename>Session</interfacename>을 갖기 때문에 이러한 상태변화를 볼 수 없다. 
        HTTP <interfacename>Session</interfacename>이 버려졌을 때 특정 HTTP 
        <interfacename>Session</interfacename>의 범위인 빈도 역시 버려진다.</para>
    </section>

    <section id="beans-factory-scopes-global-session">
      <title>전역 세션 변위(Global session scope)</title>

      <para>다음 빈 정의를 보자.</para>

      <programlisting language="xml">&lt;bean id="userPreferences" class="com.foo.UserPreferences" scope="globalSession"/&gt;</programlisting>

      <para><literal>전역 세션</literal> 범위는 표준 HTTP 
        <interfacename>Session</interfacename> 범위(<link 
        linkend="beans-factory-scopes-session">위에서 설명했다</link>)와 유사하고 
        포틀릿 기반의 웹 어플리케이션의 컨텍스트에서만 적용된다. 포틀릿 명세는 
        <interfacename>Session</interfacename> 세션의 개념을 단일 포틀릿 웹 
        어플리케이션의 모든 포틀릿 가운데 공유된다고 정의한다. <literal>전역 세션</literal> 
        범위로 정의된 빈은 전역 포틀릿의 생명주기의 범위(또는 바인드)가 된다.</para>

      <para>표준 서블릿 기반의 웹 어플리케이션을 작성하고 <literal>전역 세션</literal> 
        범위를 가지는 하나 이상의 빈을 정의하면 표준 HTTP <interfacename>Session</interfacename> 
        범위가 사용되고 에러가 발생하지 않는다.</para>
    </section>

    <section id="beans-factory-scopes-other-injection">
      <title>의존성에서 범위를 가진 빈</title>

      <para>스프링 IoC 컨테이너는 객체들(빈)의 인스턴스화 뿐만 아니라 협력 객체들(또는 의존성)들의 
        연결까지 관리한다. (예를 들어) HTTP 요청 범위의 빈은 다른 빈으로 주입하려고 하면 HTTP 요청 
        범위 빈의 위치에 AOP 프록시를 주입해야 한다. 이것은 같은 퍼블릭 인터페이스를 HTTP 요청 
        범위의 빈으로 노출하는 프록시 객체를 주입해야할 필요가 있다. 하지만 관계된 범위에서(예를 
        들면 HTTP 요청) 실제 타겟 객체를 획득하고 실제 객체에서 위임 메서드를 호출할 수 있다.</para>

      <note>
        <para><literal>싱글톤이나</literal> <literal>프로토타입</literal>같은 범위를 가진 
          빈과의 결합을 위해서 <literal>&lt;aop:scoped-proxy/&gt;</literal>를 사용할 필요가 
          <emphasis>없다.</emphasis> 싱글톤 빈에 대한 범위를 가진 프록시를 생성하려고 시도하면 
          <exceptionname>BeanCreationException</exceptionname>이 발생한다.</para>
      </note>

      <para>다음 예제의 설정은 한 라인뿐이지만 내부에서 <quote>어떻게</quote> 동작하고 
        <quote>왜</quote> 그렇게 동작하는지 이해하는 데 중요하다.</para>

      <!--What is this example supposed to show?-->

      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"&gt;

  <lineannotation>&lt;!-- HTTP <interfacename>Session</interfacename>범위의 빈은 프록시로 노출된다 --&gt;</lineannotation>
  &lt;bean id="userPreferences" class="com.foo.UserPreferences" <emphasis role="bold">scope="session"</emphasis>&gt;

        <lineannotation>&lt;!-- 주변의 빈을 프록시하도록 컨테이너에게 지시한다 --&gt;</lineannotation>
        <emphasis role="bold">&lt;aop:scoped-proxy/&gt;</emphasis>
  &lt;/bean&gt;

  <lineannotation>&lt;!-- 싱글톤 범위의 빈이 <emphasis role="bold">위의 빈에 대한 프록시에 주입된다</emphasis> --&gt;</lineannotation>
  &lt;bean id="userService" class="com.foo.SimpleUserService"&gt;

      <lineannotation>&lt;!-- <emphasis role="bold">프롯시된</emphasis> <literal>userPreferences</literal> 빈에 대한 참조 --&gt;</lineannotation>
      &lt;property name="userPreferences" ref="userPreferences"/&gt;

  &lt;/bean&gt;
&lt;/beans&gt;
</programlisting>

      <para>이러한 프록시를 생성하려면 범위를 가진 빈 정의의 자식요소로 
        <literal>&lt;aop:scoped-proxy/&gt;</literal> 요소를 추가해야 한다.
        <!--To create what such proxy? Is the proxy created above? Also, below added an x-ref that seems relevant.-->(클래스 기반의 
        프록싱을 선택하다면 클래스 패스에 CGLIB 라이브러리도 추가해야 한다. <xref
        linkend="beans-factory-scopes-other-injection-proxies"/>와 <xref
        linkend="xsd-config"/>를 참고해라.) <literal>request</literal>, 
        <literal>session</literal>, <literal>globalSession</literal>, 
        커스텀 레벨의 범위를 가진 빈 정의는 왜 <literal>&lt;aop:scoped-proxy/&gt;</literal> 
        요소가 필요한가? 다음 싱글톤 빈 정의를 시도해보고 앞에서 언급한 범위에 대해서 
        무엇을 정의해야 하는가와 비교해 봐라. (다음 <literal>userPreferences</literal> 
        빈 정의로는 <emphasis>불완전하다.)</emphasis></para>

      <programlisting language="xml">&lt;bean id="userPreferences" class="com.foo.UserPreferences" scope="session"/&gt;

&lt;bean id="userManager" class="com.foo.UserManager"&gt;
  &lt;property name="userPreferences" ref="userPreferences"/&gt;
&lt;/bean&gt;</programlisting>

      <para>앞의 예제에서 싱글톤 빈 <literal>userManager</literal>는 HTTP 
        <interfacename>Session</interfacename> 범위의 빈 <literal>userPreferences</literal>에 
        대한 참조와 함께 주입된다. 여기서 두드러진 점은 <literal>userManager</literal> 빈이 싱글톤 
        이라는 것이다. 이는 컨테이너 당 <emphasis>딱 한번만</emphasis> 인스턴스화 되고 그 
        의존성(이 경우에서는 유일한 <literal>userPreferences</literal> 빈)도 역시 한번만 주입된다. 
        이는 <literal>userManager</literal> 빈은 최초에 함께 주입된 완전히 같은 
        <literal>userPreferences</literal> 객체상에서만 수행된다는 것을 의미한다.</para>

      <!-- MLP: Beverly to review paragraph -->

      <para>생명이 긴 범위의 빈에 생명이 짧은 범위의 빈을 주입할 때 이 동작은 원하는 동작이 
        <emphasis>아니다.</emphasis> 예를 들어 HTTP <interfacename>Session</interfacename> 
        범위의 협력 빈을 의존성으로 싱글톤 빈에 주입하는 경우이다. 더 정확히 얘기하자면 HTTP 
        <interfacename>Session</interfacename> 의 생명주기인 단일 <literal>userManager</literal> 
        객체가 필요하고 앞에서 얘기한 HTTP <interfacename>Session</interfacename>을 가리키는 
        <literal>userPreferences</literal> 객체가 필요하다. 그러므로 컨테이너는 스코프 
        메카니즘(HTTP 요청, <interfacename>Session</interfacename> 등등)에서 실제 
        <classname>UserPreferences</classname> 객체를 가져올 수 있는 
        <classname>UserPreferences</classname> 클래스처럼 완전히 같은 퍼블릭 인터페이스를 
        노출하는 객체를 생성한다. (원칙적으로 객체는 <classname>UserPreferences</classname> 
        인스턴스 <emphasis>이다.</emphasis>) 컨테이너는 이 프록시 객체를 
        <literal>userManager</literal>에 주입하고 <literal>userManager</literal>는 이 
        <classname>UserPreferences</classname> 참조가 프록시라는 것을 모르고 있다. 이 예제에서 
        <interfacename>UserManager</interfacename> 인스턴스는 의존성 주입된 
        <classname>UserPreferences</classname> 객체의 메서드를 호출했을 때 사실상 프록시의 메서드를 
        호출한다. 그 다음 프록시는 (이 경우에는) HTTP <interfacename>Session</interfacename>에서 
        실제 <classname>UserPreferences</classname> 객체를 가져오고 메서드 호출을 획득한 
        실제 <classname>UserPreferences</classname> 객체에 위임한다.</para>

      <para>그러므로 <literal>요청</literal>, <literal>세션</literal>, 
        <literal>전역세션</literal> 범위의 빈을 협력객체에 주입하려면 다음의 제대로된 완전한 
        설정이 필요하다.</para>

      <programlisting language="xml">&lt;bean id="userPreferences" class="com.foo.UserPreferences" scope="session"&gt;
  <emphasis role="bold"><literal>&lt;aop:scoped-proxy/&gt;</literal></emphasis>
&lt;/bean&gt;

&lt;bean id="userManager" class="com.foo.UserManager"&gt;
  &lt;property name="userPreferences" ref="userPreferences"/&gt;
&lt;/bean&gt;</programlisting>

      <section id="beans-factory-scopes-other-injection-proxies">
        <title>생성할 프록시의 타입 선택</title>

        <para>기본적으로 스프링 컨테이너가 <literal>&lt;aop:scoped-proxy/&gt;</literal> 
          요소로 표시된 빈에 대한 프록시를 생성할 때 <emphasis>CGLIB 기반 클래스 프록시를 
          생성한다.</emphasis> 이 말은 어플리케이션 클래스 패스에 CGLIB 라이브러리가 
          필요하다는 의미이다.</para>

        <para><emphasis>Note: CGLIB 프록시는 퍼블릭 메서드 호출만 가로챈다!</emphasis> 이러한 
          프록시에서 퍼블릭이 아닌 메서드를 호출하지 마라. 퍼블릭이 아닌 메서드는 범위를 가진 타겟 
          객체로 위임되지 않을 것이다.</para>

        <para>대신 이러한 범위의 빈에 대해서 <literal>&lt;aop:scoped-proxy/&gt;</literal> 
          요소의 <literal>proxy-target-class</literal> 속성의 값을 <literal>false</literal>로 
          지정함으로써 스프링 컨테이너가 표준 JDK 인터페이스 기반의 프록시를 생성하도록 설정할 수 
          있다. JDK 인터페이스 기반 프록시를 사용한다는 것은 이러한 프록시가 유효하도록 하기 위해 
          어플리케이션 클래스패스에 추가적인 라이브러리가 필요없다는 것을 의미한다. 하지만 이러한 범위를 
          가진 빈의 클래스가 반드시 최소한 하나의 인터페이스를 구현해야 한다는 것과 이러한 범위를 가진 
          빈으로 주입된 모든 협력객체들은 반드시 인터페이스 중 하나를 통해서 빈을 참조해야 한다는 것을 
          의미한다.</para>

        <programlisting language="xml"><lineannotation>&lt;!-- <classname>DefaultUserPreferences</classname>는 <interfacename>UserPreferences</interfacename> 인터페이스를 구현한다 --&gt;</lineannotation>
&lt;bean id="userPreferences" class="com.foo.DefaultUserPreferences" scope="session"&gt;
  &lt;aop:scoped-proxy <emphasis role="bold">proxy-target-class="false"<literal/></emphasis>/&gt;
&lt;/bean&gt;

&lt;bean id="userManager" class="com.foo.UserManager"&gt;
  &lt;property name="userPreferences" ref="userPreferences"/&gt;
&lt;/bean&gt;</programlisting>

        <para>클래스 기반이나 인터페이스 기반의 프록시 선택에 대한 더 자세한 내용은 
          <xref linkend="aop-proxying"/>를 참조해라.</para>
      </section>
    </section>
  </section>

  <section id="beans-factory-scopes-custom">
    <title>커스텀 범위</title>

    <para>스프링 2.0처럼 빈 범위의 메카니즘은 확장할 수 있다. 자신만의 범위를 정의하고나 
      이미 존재하는 범위를 재정의 할 수도 있다. 하지만 기존의 범위를 재정의하는 것은 별로 
      권장하지 않으며 내장된 <literal>singleton</literal>과 <literal>prototype</literal> 
      범위는 오버라이드 <emphasis>할 수 없다.</emphasis></para>

    <section id="beans-factory-scopes-custom-creating">
      <title>커스텀 범위 생성</title>

      <para>스프링 컨테이너와 커스텀 범위를 통합하려면 이번 섹션에서 설명할 
        <interfacename>org.springframework.beans.factory.config.Scope</interfacename> 
        인터페이스를 구현해야 한다. 어떻게 자신의 범위를 구현하는가에 대한 개념을 알고 싶다면 스프링 
        프레임워크가 제공하는 <interfacename>Scope</interfacename> 구현을 참고하고 구현해야 
        하는 메서드에 대해서 자세히 설명해 놓은 <ulink 
        url="http://static.springframework.org/spring/docs/3.0.x/javadoc-api/org/springframework/beans/factory/config/Scope.html">Scope Javadoc</ulink>을 
        참고해라.</para>

      <para><literal>Scope</literal> 인터페이스는 범위에서 객체를 얻고, 범위에서 객체를 
        제거하고 소멸되도록 하는 4가지 함수가 있다.</para>

      <para>다음 메서드는 의존하는 범위에서 객체를 리턴한다. 예를 들어 세션 범위 구현은 세션 
        범위의 빈을 리턴한다. (그리고 존재하지 않는다면 메서드는 차후 참조를 위해서 빈을 바인딩한 
        후 새로운 인스턴스를 리턴한다.)<!--How can it return a a new instance of a bean that doesn't exist? Revise to clarify.--></para>

      <programlisting language="java">Object get(String name, ObjectFactory objectFactory)</programlisting>

      <para>다음 메서드는 의존하는 범위에서 객체를 제거한다. 예를 들어 세션 범위 구현은 의존하는 
        세션에서 세션 범위의 빈을 제거한다. 객체는 리턴되어야 하지만 지정한 이름의 빈이 없다면 
        null을 리턴할 수 있다.</para>

      <programlisting language="java">Object remove(String name)</programlisting>

      <para>다음 메서드는 범위가 소멸되거나 범위내에서 지정한 객체가 소멸될 때 실행되어야 하는 
        콜백을 등록한다. 소멸 콜백에 대한 더 자세한 내용은 Javadoc을 참조하거나 스프링 범위 
        구현체를 참조해라.</para>

      <programlisting language="java">void registerDestructionCallback(String name, Runnable destructionCallback)</programlisting>

      <para>다음 메서드는 의존하는 범위에 대한 conversation 식별자를 획득한다. 이 식별자는 
        각 범위마다 달르다. 세션 범위의 구형체에서 이 식별자는 세션 식별자가 될 수 있다.</para>

      <programlisting language="java">String getConversationId()</programlisting>
    </section>

    <section id="beans-factory-scopes-custom-using">
      <title>커스텀 범위의 사용</title>

      <para>하나 이상의 커스텀 <interfacename>Scope</interfacename> 구현체를 작성하고 
        테스트한 후 스프링 컨테이너가 작성한 새로운 범위를 익식하도록 해야한다. 다음 메서드는 
        새로운 <interfacename>Scope</interfacename>를 스프링 컨테이너에 등록하는 
        핵심 메서드이다.</para>

      <programlisting language="java">void registerScope(String scopeName, Scope scope);</programlisting>

      <para>이 메서드는 <interfacename>ConfigurableBeanFactory</interfacename> 인터페이스에 
        선언되어 있다. <interfacename>ConfigurableBeanFactory</interfacename> 인터페이스는 
        BeanFactory 프로퍼티로 스프링과 함께 제공되는 대부분의 
        <interfacename>ApplicationContext</interfacename> 구현체에서 사용할 수 있다.</para>

      <para><methodname>registerScope(..)</methodname>의 첫번째 아규먼트는 범위와 연관되는 
        유일한 이름이다. <literal>singleton</literal>나 <literal>prototype</literal>이 
        스프링내에서 사용하는 이러한 이름의 예이다. <methodname>registerScope(..)</methodname> 
        메서드의 두번재 아규먼트는 등록하고 사용할 커스텀 <interfacename>Scope</interfacename> 
        구현체의 실제 인스턴스다.</para>

      <para>자신만의 커스텀 <interfacename>Scope</interfacename> 구현체를 작성한다면 
        다음과 같이 등록한다.</para>

      <note>
        <para>다음 예제는 스프링에 포함된 <literal>SimpleThreadScope</literal>를 사용하지만 
          기본적으로 등록되지는 않는다. 이 설명은 자신만의 커스텀 <literal>Scope</literal> 
          구현체에서도 똑같이 적용될 것이다.</para>
      </note>

      <programlisting language="java">
Scope threadScope = new SimpleThreadScope();
beanFactory.registerScope("<emphasis role="bold">thread</emphasis>", threadScope);</programlisting>

      <para>그 다음 커스텀 <interfacename>Scope</interfacename>의 범위 규칙을 따르는 
        빈 정의를 생성한다.</para>

      <programlisting language="xml">&lt;bean id="..." class="..." scope="thread"&gt;</programlisting>

      <para>커스텀 <interfacename>Scope</interfacename> 구현체를 사용할 때 범위를 
        프로그래밍적으로 등록하는데 제한은 없다. 또한 <classname>CustomScopeConfigurer</classname> 
        클래스를 사용해서 선언적으로 <interfacename>Scope</interfacename>를 등록할 
        수도 있다.</para>

      <programlisting language="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"&gt;

  &lt;bean class="org.springframework.beans.factory.config.CustomScopeConfigurer"&gt;
      &lt;property name="scopes"&gt;
          &lt;map&gt;<emphasis role="bold">
              &lt;entry key="thread"&gt;
                  &lt;bean class="org.springframework.context.support.SimpleThreadScope"/&gt;
              &lt;/entry&gt;</emphasis>
          &lt;/map&gt;
      &lt;/property&gt;
  &lt;/bean&gt;

  &lt;bean id="bar" class="x.y.Bar" scope="thread"&gt;
      &lt;property name="name" value="Rick"/&gt;
      &lt;aop:scoped-proxy/&gt;
  &lt;/bean&gt;

  &lt;bean id="foo" class="x.y.Foo"&gt;
      &lt;property name="bar" ref="bar"/&gt;
  &lt;/bean&gt;

&lt;/beans&gt;</programlisting>

      <note>
        <para><interfacename>FactoryBean</interfacename>구현체에 &lt;aop:scoped-proxy/&gt;가 
          있으면 이는 <methodname>getObject()</methodname>에서 리턴받은 객체가 아닌 스스로 범위를 
          가진 팩토리 빈이다.</para>
      </note>
    </section>
  </section>
</section>
