<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
 "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="oxm">
    <title>O/X 매퍼(Mapper)를 사용한 XML 마샬링(Marshalling)</title>

    <section id="oxm-introduction">
        <title>소개</title>
        <para>
            이번 장에서는 스프링의 Object/XML 매핑지원을 설명할 것이다. Object/XML 매핑(줄여서 O/X 매핑)은 XML 문서를
            객체로 변환하거나 객체를 XML로 변환하는 행위이다. 이 변환과정은 XML 먀샬링(Marshalling)이나 XML
            직렬화(Serialization)라고도 알려져 있다. 이번 장에서는 혼용가능한 이 용어들을 사용할 것이다.
        </para>
        <para>
            O/X 매핑분야에서는 <emphasis>marshaller</emphasis>가 객체(그래프)를 XML로 직렬화하는 책임을 진다.
            유사한 방법으로 <emphasis>unmarshaller</emphasis>가 XML을 객체 그래프로 역직렬화한다.
            이 XML은 DOM 문서나 입력 스트림, 출력 스트림, SAX 핸들러의 형식을 받을 수 있다.
        </para>
        <para>O/X 매핑이 필요한 곳에 스프링을 사용하는 이점이 몇가지 있다.</para>
        <formalpara>
            <title>쉬운 설정</title>
            <para>
                스프링의 빈 팩토리는 JAXB 컨텍스트, JiBX 바인딩 팩토리 등을 생성할 필요없이 마샬러의 설정을 쉽게한다.
                어플리케이션 컨텍스트의 다른 빈들처럼 마살러를 설정할 수 있다. 게다가 설정을 더 쉽게 하는 XML
                스키마기반의 설정을 다수의 마살러에도 사용할 수 있다.
            </para>
        </formalpara>
        <formalpara>
            <title>일관된 인터페이스</title>
            <para>
                스프링의 O/X 매핑은 두개의 전역 인터페이스 <interfacename>Marshaller</interfacename>와
                <interfacename>Unmarshaller</interfacename>인터페이스를 통해서 수행된다. 이러한 추상화를
                통해서 마샬링을 하는 클래스를 약간만 변경하거나 전혀 변경하지 않고 상대적으로 쉽게 O/X 매핑 프레임워크를
                바꿀 수 있다. 이 접근은 비침투적인 방법으로 각 기술의 장점을 이용해서 믹스앤매치(mix-and-match) 접근으로
                XML 마샬링을 할 수 있게 하는 부가적인 이점이 있다.
            </para>
        </formalpara>
        <formalpara>
            <title>일관된 예외 계층</title>
            <para>
                스프링은 의존하는 O/X 매핑도구의 예외를 최상위(root) 예외가
                <classname>XmlMappingException</classname>인 자신만의 예외계층으로의 변환을 제공한다.
                기대하는 대로 이러한 런타임 예외는 원래의 예외를 감싸기 때문에 정보를 잃어버리지 않는다.
            </para>
        </formalpara>
    </section>
    <section id="oxm-marshaller-unmarshaller">
        <title>마살러(Marshaller)와 언마샬러(Unmarshaller)</title>
        <para>
            소개부분에서 얘기했듯이 <emphasis>마샬러</emphasis>는 객체를 XML롤 직렬화하고 <emphasis>언마샬러</emphasis>는
            XML 스트림을 객체로 역직렬화한다. 이번 섹션에서 이 목적에 사용하는 스프링의 두 인터페이스를 설명할 것이다.
        </para>
        <section>
            <title>마샬러</title>
            <para>
                스프링은 <interfacename>org.springframework.oxm.Marshaller</interfacename>
                인터페이스뒤에 모든 마샬링 작업을 추상화한다. 여기의 주요 메서드들은 다음 목록에 나와 있다.
                <programlisting language="java"><![CDATA[
public interface Marshaller {

    /**
     * Marshals the object graph with the given root into the provided Result.
     */
    void marshal(Object graph, Result result)
        throws XmlMappingException, IOException;
}]]></programlisting>
                <interfacename>Marshaller</interfacename> 인터페이스는 주어진 객체를 주어진
                <interfacename>javax.xml.transform.Result</interfacename>로 마샬링하는 하나의 메인메서드를 가진다.
                결과는 기본적으로 XML 출력 추상화를 나타내는 태깅(tagging) 인터페이스이다.
                구현체(concrete implementations)는 다음 표에 나타난 대로 다양한 XML 표현을 감싼다.
                <informaltable>
                    <tgroup cols="2">
                        <thead>
                            <row>
                                <entry><interfacename>Result</interfacename> 구현체</entry>
                                <entry>XML 표현을 감싼다</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry><classname>DOMResult</classname></entry>
                                <entry><interfacename>org.w3c.dom.Node</interfacename></entry>
                            </row>
                            <row>
                                <entry><classname>SAXResult</classname></entry>
                                <entry><interfacename>org.xml.sax.ContentHandler</interfacename></entry>
                            </row>
                            <row>
                                <entry><interfacename>StreamResult</interfacename></entry>
                                <entry>
                                    <classname>java.io.File</classname>,
                                    <classname>java.io.OutputStream</classname>, or
                                    <classname>java.io.Writer</classname>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
                <note>
                    <para>
                        <methodname>marshal()</methodname> 메서드가 첫 파라미터로 평범한 객체를 받기는 하지만
                        대부분의 <classname>Marshaller</classname> 구현체는 임의의 객체들을 다룰 수는 없다.
                        대신에 객체 클래스는 매핑 파일에서 매핑되거나 어노테이션으로 표시되거나 마샬러와 등록되거나 공통적인
                        기반 클래스를 가져야 한다.
                        이것을 다루는 O/X 기술을 어떻게 선택해야 하는지는 이번 장의 후반 섹션들을 참고해라.
                    </para>
                </note>
            </para>
        </section>
        <section>
            <title>언마샬러</title>
            <para>
                <interfacename>Marshaller</interfacename>와 유사하게
                <interfacename>org.springframework.oxm.Unmarshaller</interfacename> 인터페이스가 있다.
                <programlisting language="java"><![CDATA[
public interface Unmarshaller {

    /**
     * Unmarshals the given provided Source into an object graph.
     */
    Object unmarshal(Source source)
        throws XmlMappingException, IOException;
}]]></programlisting>
                이 인터페이스도 주어진 <interfacename>javax.xml.transform.Source</interfacename>
                (XML 입력 추상화)를 읽어서 읽어들인 객체를 반환하는 하나의 메서드를 가진다. 결과에 따라 Source는
                세개의 구현체를 가진 태깅인터페이스이다. 각각은 다음 표에 나온 여러가지 XML 표현을 감싼다.
                <informaltable>
                    <tgroup cols="2">
                        <thead>
                            <row>
                                <entry><interfacename>Source</interfacename> 구현체</entry>
                                <entry>XML 표현을 감싼다</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry><classname>DOMSource</classname></entry>
                                <entry><interfacename>org.w3c.dom.Node</interfacename></entry>
                            </row>
                            <row>
                                <entry><classname>SAXSource</classname></entry>
                                <entry>
                                    <classname>org.xml.sax.InputSource</classname>와
                                    <interfacename>org.xml.sax.XMLReader</interfacename>
                                </entry>
                            </row>
                            <row>
                                <entry><classname>StreamSource</classname></entry>
                                <entry>
                                    <classname>java.io.File</classname>,
                                    <classname>java.io.InputStream</classname>,
                                    <classname>java.io.Reader</classname>
                                </entry>
                            </row>
                        </tbody>
                    </tgroup>
                </informaltable>
            </para>
        </section>
        <para>
            두 개의 분리된 마샬링 인터페이스(<interfacename>Marshaller</interfacename>와
            <interfacename>Unmarshaller</interfacename>)이 있기는 하지만 이 둘을 하나의 클래스에 구현한
            Spring-WS에서 모든 구현체가 있다. 즉, 마샬러 클래스를 연결하고 이를
            <filename>applicationContext.xml</filename>에서 마살러와 언마살러 둘 다로 참조할 수 있다.
        </para>
        <section>
            <title>XmlMappingException</title>
            <para>
                스프링은 의존하는 O/X 매핑도구의 예외를 루트 예외가 <classname>XmlMappingException</classname>인
                자신만의 예외 계층으로 변환한다. 기대하는 대로 이러한 런타임 예외는 원래의 예외를 감싸기 때문에 잃어버리는 정보는 없다.
            </para>
            <para>
                추가적으로 <classname>MarshallingFailureException</classname>와
                <classname>UnmarshallingFailureException</classname>는 의존하는 O/X 매핑 도구가 마샬링 작업과
                언마샬링 작업을 구분하지 않더라도 마살링 작업과 언마샬링 작업을 구분할 수 있게 한다.
            </para>
            <para>
                O/X 매핑 예외계층은 다음 그림에 나와있다.
                <mediaobject>
                    <imageobject>
                        <imagedata fileref="images/oxm-exceptions.png" align="center"/>
                    </imageobject>
                    <caption>
                        <para>
                            O/X 매핑 예외 계층
                        </para>
                    </caption>
                </mediaobject>
            </para>
        </section>
    </section>
    <section id="oxm-usage">
        <title>마샬러(Marshaller)와 언마샬러(Unmarshaller)의 사용</title>
        <para>
            스프링의 OXM을 다양한 상황에 사용할 수 있다. 다음 예제에서 XML 파일로 스프링이 관리하는 어플리케이션의 설정을
            마샬링하는데 스프링의 OXM을 사용할 것이다. 이 설정을 표현하는데 간단한 JavaBean을 사용할 것이다.
            <programlisting language="java"><![CDATA[
public class Settings {
    private boolean fooEnabled;

    public boolean isFooEnabled() {
        return fooEnabled;
    }

    public void setFooEnabled(boolean fooEnabled) {
        this.fooEnabled = fooEnabled;
    }
}]]></programlisting>
        </para>
        <para>
            어플리케이션 클래스는 어플리케이션의 설정을 저장하는데 이 빈을 사용한다. 클래스는 메인 메서드외에 두 개의 메서드를 가진다.
            <methodname>saveSettings()</methodname>는 <filename>settings.xml</filename>라는 파일에 설정 빈을
            저장하고 <methodname>loadSettings()</methodname>는 이러한 설정을 다시 로드한다.
            <methodname>main()</methodname> 메서드는 스프링의 어플리케이션 컨텍스트를 생성하고 이 두 메서드를 호출한다.
            <programlisting language="java"><![CDATA[
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.oxm.Marshaller;
import org.springframework.oxm.Unmarshaller;

public class Application {
    private static final String FILE_NAME = "settings.xml";
    private Settings settings = new Settings();
    private Marshaller marshaller;
    private Unmarshaller unmarshaller;

    public void setMarshaller(Marshaller marshaller) {
        this.marshaller = marshaller;
    }

    public void setUnmarshaller(Unmarshaller unmarshaller) {
        this.unmarshaller = unmarshaller;
    }

    public void saveSettings() throws IOException {
        FileOutputStream os = null;
        try {
            os = new FileOutputStream(FILE_NAME);
            this.marshaller.marshal(settings, new StreamResult(os));
        } finally {
            if (os != null) {
                os.close();
            }
        }
    }

    public void loadSettings() throws IOException {
        FileInputStream is = null;
        try {
            is = new FileInputStream(FILE_NAME);
            this.settings = (Settings) this.unmarshaller.unmarshal(new StreamSource(is));
        } finally {
            if (is != null) {
                is.close();
            }
        }
    }

    public static void main(String[] args) throws IOException {
        ApplicationContext appContext =
            new ClassPathXmlApplicationContext("applicationContext.xml");
        Application application = (Application) appContext.getBean("application");
        application.saveSettings();
        application.loadSettings();
    }
}]]></programlisting>
            <classname>Application</classname>에는 <property>marshaller</property>와
            <property>unmarshaller</property> 프로퍼티가 둘 다 설정되어야 한다. 다음의
            <filename>applicationContext.xml</filename>를 사용해서 이 작업을 할 수 있다.
            <programlisting language="xml"><![CDATA[
<beans>
    <bean id="application" class="Application">
        <property name="marshaller" ref="castorMarshaller" />
        <property name="unmarshaller" ref="castorMarshaller" />
    </bean>
    <bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller"/>
</beans>
]]></programlisting>
            이 어플리케이션 컨텍스트는 Castor를 사용하지만 이 장의 뒷부분에서 설명하는 다른 마샬러 인스턴스 중 어떤 것이라도 사용할 수 있다.
            Castor는 기본적으로 더이상의 어떤 설정도 필요로 하지 않기 때문에 빈 정의가 훨씬 간단하다.
            또한 <classname>CastorMarshaller</classname>는 <interfacename>Marshaller</interfacename>와
            <interfacename>Unmarshaller</interfacename>를 모두 구현하고 있으므로 어플리케이션의
            <property>marshaller</property>와 <property>unmarshaller</property> 모두에서
            <varname>castorMarshaller</varname> 빈을 참조할 수 있다.
        </para>
        <para>
            이 예제 어플리케이션은 다음의 <filename>settings.xml</filename> 파일을 만든다.
            <programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<settings foo-enabled="false"/>
]]></programlisting>
        </para>
    </section>
	<section>
        <title>XML 스키마 기반의 설정</title>
       	<para>
       		마살러를 OXM 네임스페이스의 태그를 사용해서 더욱 간결하게 설정할 수 있다. 이러한 태그를 사용하려면
            우선 XML 설정파일의 앞부분에 적절한 스키마를 참조해야 한다. 다음은 'oxm'과 관련된 부분이다.
       	</para>
       	<programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    ]]><emphasis role="bold"><![CDATA[xmlns:oxm="http://www.springframework.org/schema/oxm"]]></emphasis>
    <![CDATA[xsi:schemaLocation="http://www.springframework.org/schema/beans
    ]]><![CDATA[http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    ]]><emphasis role="bold"><![CDATA[http://www.springframework.org/schema/oxm
    ]]><![CDATA[http://www.springframework.org/schema/oxm/spring-oxm-3.0.xsd"]]></emphasis><![CDATA[>
]]></programlisting>
		<para>
			지금은 다음의 태그를 사용할 수 있다.
			<itemizedlist>
				<listitem>
					<para><link linkend="oxm-jaxb2-xsd"><literal>jaxb2-marshaller</literal></link></para>
				</listitem>
				<listitem>
					<para><link linkend="oxm-xmlbeans-xsd"><literal>xmlbeans-marshaller</literal></link></para>
				</listitem>
				<listitem>
					<para><link linkend="oxm-jibx-xsd"><literal>jibx-marshaller</literal></link></para>
				</listitem>
			</itemizedlist>
		</para>
		<para>
            각각의 마살러 부분에서 각 태그를 설명할 것이다.
            예제로 보자면 JAXB2 마샬러를 설정하는 방법은 다음과 같을 것이다.
		</para>
		<programlisting language="xml"><![CDATA[<oxm:jaxb2-marshaller id="marshaller" contextPath="org.springframework.ws.samples.airline.schema"/>]]></programlisting>
    </section>
    <section id="oxm-jaxb">
        <title>JAXB</title>
        <para>
            JAXB 바인딩 컴파일러는 W3C XML 스키마를 하나 이상의 자바 클래스, <filename>jaxb.properties</filename> 파일,
            어쩌면 몇몇 리소스 파일들로 변환한다. JAXB도 어노테이션이 붙은 자바 클래스에서 스키마를 생성하는 방법을 제공한다.
        </para>
        <para>
            스프링은 XML 마샬링 전략으로 JAXB 2.0 API를 지원한다. 다음의 <interfacename>Marshaller</interfacename>와
            <interfacename>Unmarshaller</interfacename>는 <xref linkend="oxm-marshaller-unmarshaller"/>에서
            설명한다. 여기에 상응하는 통합 틀래스들은 <package>org.springframework.oxm.jaxb</package> 패키지에 있다.
        </para>
        <section id="oxm-jaxb2">
            <title>Jaxb2Marshaller</title>
            <para>
                <classname>Jaxb2Marshaller</classname> 클래스는 스프링의
                <interfacename>Marshaller</interfacename>와 <interfacename>Unmarshaller</interfacename>를
                모두 구현하고 있다. <classname>Jaxb2Marshaller</classname> 클래스가 동작하려면
                <property>contextPath</property> 프로퍼티로 설정할 수 있는 컨텍스트 경로가 필요하다. 컨텍스트 경로는
                스키마로 만들어낸 클래스를 포함하고 있는 자바 패키지명을 콜론(:)으로 구분한 목록이다.
                <classname>Jaxb2Marshaller</classname> 클래스는 마샬러가 지원해야 하는 클래스들의 배열을 설정할 수 있는
                <property>classesToBeBound</property> 프로퍼티도 제공한다. 스키마 유효성확인은 다음과 같이 빈에 하나
                이상의 스키마 리소스를 지정해서 수행한다.
            </para>
            <programlisting language="xml"><![CDATA[
<beans>

    <bean id="jaxb2Marshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="classesToBeBound">
            <list>
                <value>org.springframework.oxm.jaxb.Flight</value>
                <value>org.springframework.oxm.jaxb.Flights</value>
            </list>
        </property>
        <property name="schema" value="classpath:org/springframework/oxm/schema.xsd"/>
    </bean>
    ...

</beans>]]></programlisting>
			<section id="oxm-jaxb2-xsd">
                <title>XML 스키마기반의 설정</title>
	        	<para>
                    <literal>jaxb2-marshaller</literal> 태그는 <classname>org.springframework.oxm.jaxb.Jaxb2Marshaller</classname>를 설정한다.
                    다음은 그 예제이다.
	        	</para>
	        	<programlisting language="xml"><![CDATA[<oxm:jaxb2-marshaller id="marshaller" contextPath="org.springframework.ws.samples.airline.schema"/>]]></programlisting>
	        	<para>
	        		아니면 <literal>class-to-be-bound</literal> 자식태그로 바인딩해야 할 클래스의 목록을 마샬러에 제공할 수 있다.
	        	</para>
	        	<programlisting language="xml"><![CDATA[<oxm:jaxb2-marshaller id="marshaller">
    <oxm:class-to-be-bound name="org.springframework.ws.samples.airline.schema.Airport"/>
    <oxm:class-to-be-bound name="org.springframework.ws.samples.airline.schema.Flight"/>
    ...
</oxm:jaxb2-marshaller>
	        	]]></programlisting>
	        	<para>
	        		사용할 수 있는 속성은 다음과 같다.
                    <informaltable>
                        <tgroup cols="3">
                        	<colspec colwidth="1.5*"/>
                        	<colspec colwidth="4*"/>
                        	<colspec colwidth="1*"/>
                            <thead>
                                <row>
                                    <entry>속성</entry>
                                    <entry>설명</entry>
                                    <entry>필수여부</entry>
                                </row>
                            </thead>
                            <tbody>
                                <row>
                                    <entry><literal>id</literal></entry>
                                    <entry>마샬러의 아이디</entry>
                                    <entry>필수아님</entry>
                                </row>
                                <row>
                                    <entry><literal>contextPath</literal></entry>
                                    <entry>JAXB 컨텍스트 경로</entry>
                                    <entry>필수아님</entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </informaltable>
	        	</para>
	        </section>
        </section>
    </section>
    <section id="oxm-castor">
        <title>Castor</title>
        <para>
            Castor XML 매핑은 오픈소스 XML 바인딩 프레임워크이다. Castor XML 매핑은 자바 객체모델에 있는 데이터를
            XML 문서로 변환하거나 그 반대로 변환할 수 있게 한다. 기본적으로 Castor XML 매핑은 다른 어떤 설정도 필요없지만
            Castor의 동작을 더 세밀하게 제어하려면 매핑파일을 사용해야 한다.
        </para>
        <para>
            Castor에 대한 자세한 내용은 <ulink url="http://castor.org/xml-framework.html">
            <citetitle>Castor 웹사이트</citetitle></ulink>를 참고해라. 스프링 통합 클래스는
            <package>org.springframework.oxm.castor</package> 패키지에 있다.
        </para>
        <section>
            <title>CastorMarshaller</title>
            <para>
                JAXB로 작업할 때처럼 <classname>CastorMarshaller</classname>는
                <interfacename>Marshaller</interfacename>와 <interfacename>Unmarshaller</interfacename>
                인터페이스를 모두 구현하고 있다.
                다음과 같이 연결할 수 있다.
            </para>
            <programlisting language="xml"><![CDATA[
<beans>

    <bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller" />
    ...

</beans>]]></programlisting>
        </section>
        <section>
            <title>Mapping</title>
            <para>
                Castor의 기본 마샬링 동작에 의존할 수도 있지만 그 이상의 제어를 해야할 것이다.
                이는 Castor 매핑 파일을 사용해서 할 수 있다. 자세한 내용은
                <ulink url="http://castor.org/xml-mapping.html">Castor XML Mapping</ulink>을 참고해라.
            </para>
            <para>
                아래에서 클래스패스 리소스를 가리키는 <property>mappingLocation</property> 리소스 프로퍼티를 사용해서
                매핑을 설정할 수 있다.
            </para>
            <programlisting language="xml"><![CDATA[
<beans>
    <bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller" >
        <property name="mappingLocation" value="classpath:mapping.xml" />
    </bean>
</beans>
]]></programlisting>
        </section>
    </section>

    <section id="oxm-xmlbeans">
        <title>XMLBeans</title>
        <para>
            XMLBeans은 XML 스키마를 완전히 지원하는 XML 바인딩 도구로 정확한 전체 XML Infoset을 제공한다. XMLBeans는 다른
            대부분의 O/X 매핑 프레임워크들이 취하는 XML 스키마에서 생성한 모든 클래스들은
            <interfacename>XmlObject</interfacename>로 모두 만들어지고 그 안에 XML 바인딩 정보가 들어있는 것과는
            다른 접근을 취한다.
        </para>
        <para>
            XMLBeans의 자세한 정보는 <ulink url="http://xmlbeans.apache.org/">
            <citetitle>XMLBeans 웹사이트</citetitle></ulink>를 참고해라. Spring-WS 통합 클래스들은
            <package>org.springframework.oxm.xmlbeans</package> 패키지에 있다.
        </para>
        <section>
            <title>XmlBeansMarshaller</title>
            <para>
                <classname>XmlBeansMarshaller</classname>는
                <interfacename>Marshaller</interfacename>와
                <interfacename>Unmarshaller</interfacename>를 모두
                구현하고 있다. 다음과 같이 설정할 수 있다.
            </para>
            <programlisting language="xml"><![CDATA[
<beans>

    <bean id="xmlBeansMarshaller" class="org.springframework.oxm.xmlbeans.XmlBeansMarshaller" />
    ...

</beans>]]></programlisting>
            <note>
                <para>
                    <classname>XmlBeansMarshaller</classname>는 모든 <classname>java.lang.Object</classname>가 아니라 <interfacename>XmlObject</interfacename> 타입의 객체들만 마샬링할 수 있다.
                </para>
            </note>
			<section id="oxm-xmlbeans-xsd">
	        	<title>XML 스키마 기반의 설정</title>
	        	<para>
                    <literal>xmlbeans-marshaller</literal> 태그는 <classname>org.springframework.oxm.xmlbeans.XmlBeansMarshaller</classname>를 설정한다.
                    다음은 그 예제이다.
	        	</para>
	        	<programlisting language="xml"><![CDATA[<oxm:xmlbeans-marshaller id="marshaller"/>]]></programlisting>
	        	<para>
	        		사용할 수 있는 속성은 다음과 같다.
                    <informaltable>
                        <tgroup cols="3">
                        	<colspec colwidth="1.5*"/>
                        	<colspec colwidth="4*"/>
                        	<colspec colwidth="1*"/>
                            <thead>
                                <row>
                                    <entry>속성</entry>
                                    <entry>설명</entry>
                                    <entry>필수여부</entry>
                                </row>
                            </thead>
                            <tbody>
                                <row>
                                    <entry><literal>id</literal></entry>
                                    <entry>마샬러의 아이디</entry>
                                    <entry>필수아님</entry>
                                </row>
                                <row>
                                    <entry><literal>options</literal></entry>
                                    <entry>이 마샬러에 사용해야 하는 XmlOptions의 빈 이름. 보통은
                                    <classname>XmlOptionsFactoryBean</classname> 정의이다.</entry>
                                    <entry>필수아님</entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </informaltable>
	        	</para>
	        </section>
        </section>


    </section>

    <section id="oxm-jibx">
        <title>JiBX</title>
        <para>
            JiBX 프레임워크는 JDO가 ORM에 제공하는 것과 유사한 해결책을 제공한다. 즉, 바인딩 정의가 자바 객체를 XML로 변환하거나
            XML을 자바 객체로 변환하는 방법에 대한 규칙을 정의한다. 클래스의 바인딩과 컴파일을 준비한 후에 JiBX 바인딩 컴파일러는
            클래스의 인스턴스를 XML로 변환하거나 XML을 클래스의 인스턴스로 변하는 작업을 다루는 코드를 추가해서 클래스 파일을 개선시킨다.
        </para>
        <para>
            JiBX에 대한 자세한 내용은 <ulink url="http://jibx.sourceforge.net/">
            <citetitle>JiBX 웹사이트</citetitle></ulink>를 참고해라. 스프링 통합 클래스들은
            <package>org.springframework.oxm.jibx</package> 패키지에 있다.
        </para>
        <section>
            <title>JibxMarshaller</title>
            <para>
                <classname>JibxMarshaller</classname> 클래스는
                <interfacename>Marshaller</interfacename>와 <interfacename>Unmarshaller</interfacename>
                인터페이스를 모두 구현하고 있다. <classname>JibxMarshaller</classname> 클래스가 동작하려면
                <property>targetClass</property> 프로퍼티를 사용해서 설정할 수 있는 마샬링할 클래스의 이름이 필요하다.
                선택적으로 <property>bindingName</property> 프로퍼티를 사용해서 바인딩 이름을 설정할 수 있다.
                다음 예제에서는 <classname>Flights</classname> 클래스를 바인딩한다.
            </para>
            <programlisting language="xml"><![CDATA[
<beans>

    <bean id="jibxFlightsMarshaller" class="org.springframework.oxm.jibx.JibxMarshaller">
        <property name="targetClass">org.springframework.oxm.jibx.Flights</property>
    </bean>

    ...
]]></programlisting>
            <para>
                <classname>JibxMarshaller</classname>는 하나의 클래스에 설정한다. 여러 클래스를 마샬링하고 싶다면 다른
                <property>targetClass</property> 프로퍼티 값을 가진 <classname>JibxMarshaller</classname>를
                여러 개 설정해야 한다.
            </para>
			<section id="oxm-jibx-xsd">
	        	<title>XML 스키마에 기반한 설정</title>
	        	<para>
                    <literal>jibx-marshaller</literal> 태그는 <classname>org.springframework.oxm.jibx.JibxMarshaller</classname>를 설정한다.
                    다음은 그 예제이다.
	        	</para>
	        	<programlisting language="xml"><![CDATA[<oxm:jibx-marshaller id="marshaller" target-class="org.springframework.ws.samples.airline.schema.Flight"/>]]></programlisting>
	        	<para>
                    사용할 수 있는 속성은 다음과 같다.
                    <informaltable>
                        <tgroup cols="3">
                        	<colspec colwidth="1.5*"/>
                        	<colspec colwidth="4*"/>
                        	<colspec colwidth="1*"/>
                            <thead>
                                <row>
                                    <entry>속성</entry>
                                    <entry>설명</entry>
                                    <entry>필수여부</entry>
                                </row>
                            </thead>
                            <tbody>
                                <row>
                                    <entry><literal>id</literal></entry>
                                    <entry>마샬러의 아이디</entry>
                                    <entry>필수아님</entry>
                                </row>
                                <row>
                                    <entry><literal>target-class</literal></entry>
                                    <entry>이 마샬러의 대상 클래스</entry>
                                    <entry>필수</entry>
                                </row>
                                <row>
                                    <entry><literal>bindingName</literal></entry>
                                    <entry>이 마샬러가 사용하는 바인딩 이름</entry>
                                    <entry>필수아님</entry>
                                </row>
                            </tbody>
                        </tgroup>
                    </informaltable>
	        	</para>
	        </section>
        </section>
    </section>
    <section id="oxm-xstream">
        <title>XStream</title>
        <para>
            XStream는 객체를 XML로 직렬화하거나 그 반대로 하는 간단한 라이브러리이다.
            XStream는 어떤 매핑도 필요로하지 않고 깔끔한 XML을 생성한다.
        </para>
        <para>
            XStream에 대한 자세한 정보는 <ulink url="http://xstream.codehaus.org/">
            <citetitle>XStream 웹사이트</citetitle></ulink>를 참고해라.
            스프링 통합 클래스들은 <package>org.springframework.oxm.xstream</package> 패키지에 있다.
        </para>
        <section>
            <title>XStreamMarshaller</title>
            <para>
                <classname>XStreamMarshaller</classname>는 어떤 설정도 필요로 하지 않고 어플리케이션 컨텍스트에서
                직접 설정할 수 있다. XML을 추가로 커스터마이징하기 위해 클래스에 매핑된 문자열 별칭으로 이루어진
                <emphasis>별칭 맵(alias map)</emphasis>을 설정할 수 있다.
            </para>
            <programlisting language="xml"><![CDATA[
<beans>

    <bean id="xstreamMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
        <property name="aliases">
            <props>
                <prop key="Flight">org.springframework.oxm.xstream.Flight</prop>
            </props>
        </property>
    </bean>
    ...

</beans>]]></programlisting>
            <warning>
                <para>
                  기본적으로 XStream은 보안허점이 될 수도 있는 언마샬링되는 임의의 클래스들을 허용한다. 그래서 다음과 같이
                  <classname>XStreamMarshaller</classname>에
                  <property>supportedClasses</property> 프로퍼티를 설정하기를 권장한다.
                  <programlisting language="xml"><![CDATA[<bean id="xstreamMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
    <property name="supportedClasses" value="org.springframework.oxm.xstream.Flight"/>
    ...
</bean>]]></programlisting>
                  이는 등록된 클래스들만 언마샬링할 수 있다는 것을 보장할 것이다.
                </para>
                <para>
                  추가적으로 지원하는 클래스만 언마샬링되어야 한다는 것을 보장하기위해 <ulink url="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/org/springframework/oxm/xstream/XStreamMarshaller.html#setConverters(com.thoughtworks.xstream.converters.ConverterMatcher[])">
                  커스텀 컨버터</ulink>를 등록할 수 있다.
                </para>
            </warning>
          <note>
              <para>
                  XStream은 XML 직렬화 라이브러리이지 데이터 바인딩 라이브러리가 아니다.
                  그러므로 XStream은 제한된 네임스페이스를 지원한다. 그러므로 웹서비스내에서 사용하기에는 별로 알맞지 않다.
              </para>
          </note>
        </section>
    </section>
</chapter>
